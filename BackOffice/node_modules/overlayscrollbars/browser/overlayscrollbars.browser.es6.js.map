{"version":3,"file":"overlayscrollbars.browser.es6.js","sources":["../../src/support/cache.ts","../../src/support/compatibility/isBrowser.ts","../../src/support/utils/alias.ts","../../src/support/compatibility/apis.ts","../../src/support/utils/types.ts","../../src/support/utils/animation.ts","../../src/support/utils/array.ts","../../src/support/utils/strings.ts","../../src/support/utils/equal.ts","../../src/support/utils/noop.ts","../../src/support/utils/function.ts","../../src/support/utils/object.ts","../../src/support/utils/math.ts","../../src/support/dom/attribute.ts","../../src/support/dom/class.ts","../../src/support/dom/traversal.ts","../../src/support/dom/manipulation.ts","../../src/support/dom/create.ts","../../src/support/dom/style.ts","../../src/support/dom/dimensions.ts","../../src/support/dom/events.ts","../../src/support/dom/scroll.ts","../../src/support/eventListeners.ts","../../src/options.ts","../../src/classnames.ts","../../src/environment.ts","../../src/initialization.ts","../../src/instances.ts","../../src/observers/domObserver.ts","../../src/plugins/plugins.ts","../../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../../src/setups/structureSetup/structureSetup.utils.ts","../../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../../src/plugins/clickScrollPlugin/clickScrollPlugin.ts","../../src/observers/sizeObserver.ts","../../src/observers/trinsicObserver.ts","../../src/setups/observersSetup/observersSetup.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../../src/setups/structureSetup/structureSetup.elements.ts","../../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../../src/setups/structureSetup/structureSetup.ts","../../src/setups/setups.ts","../../src/overlayscrollbars.ts"],"sourcesContent":["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","export const isBrowser =\r\n  typeof window !== 'undefined' &&\r\n  // deno has the global `window` defined, so additionally check for document\r\n  typeof document !== 'undefined';\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const mathSign = Math.sign;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n","import { wnd } from '../utils/alias';\r\n\r\nconst getApi = <T>(name: string) =>\r\n  (typeof wnd[name as keyof typeof wnd] !== 'undefined'\r\n    ? wnd[name as keyof typeof wnd]\r\n    : undefined) as T;\r\n\r\nexport const MutationObserverConstructor = getApi<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  getApi<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = getApi<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = getApi<new (constructor: unknown) => AnimationTimeline>('ScrollTimeline');\r\n","import type { PlainObject } from '~/typings';\r\nimport { isBrowser } from '../compatibility/isBrowser';\r\n\r\nconst ElementNodeType = isBrowser && Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\nconst typeRgx = /^\\[object (.+)\\]$/;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString.call(obj).replace(typeRgx, '$1').toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n","import { mathMax, rAF, cAF } from './alias';\r\nimport { isFunction } from './types';\r\n\r\n/**\r\n * percent: current percent (0 - 1),\r\n * time: current time (duration * percent),\r\n * min: start value\r\n * max: end value\r\n * duration: duration in ms\r\n */\r\nexport type EasingFn = (\r\n  percent: number,\r\n  time: number,\r\n  min: number,\r\n  max: number,\r\n  duration: number\r\n) => number;\r\n\r\nconst animationCurrentTime = () => performance.now();\r\n\r\nexport const animateNumber = (\r\n  from: number,\r\n  to: number,\r\n  duration: number,\r\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\r\n  easing?: EasingFn | false\r\n): ((complete?: boolean) => void) => {\r\n  let animationFrameId = 0;\r\n  const timeStart = animationCurrentTime();\r\n  const finalDuration = mathMax(0, duration);\r\n  const frame = (complete?: boolean) => {\r\n    const timeNow = animationCurrentTime();\r\n    const timeElapsed = timeNow - timeStart;\r\n    const stopAnimation = timeElapsed >= finalDuration;\r\n    const percent = complete\r\n      ? 1\r\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\r\n    const progress =\r\n      (to - from) *\r\n        (isFunction(easing)\r\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\r\n          : percent) +\r\n      from;\r\n    const animationCompleted = stopAnimation || percent === 1;\r\n\r\n    onFrame && onFrame(progress, percent, animationCompleted);\r\n\r\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\r\n  };\r\n  frame();\r\n  return (complete) => {\r\n    cAF!(animationFrameId);\r\n    complete && frame(complete);\r\n  };\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | false | null | undefined;\r\n\r\nexport function each<T extends Array<unknown> | ReadonlyArray<unknown>>(\r\n  array: T,\r\n  callback: (\r\n    value: T extends Array<infer V> | ReadonlyArray<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends ArrayLike<unknown>>(\r\n  arrayLikeObject: T,\r\n  callback: (\r\n    value: T extends ArrayLike<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, key: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each(\r\n  source: Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | PlainObject,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | Set<unknown> | PlainObject {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[] | readonly T[], item: T): boolean =>\r\n  arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => Array.from(arr || []);\r\n\r\n/**\r\n * Creates an array if the passed value is not an array, or returns the value if it is.\r\n * @param value The value.\r\n * @returns An array which represents the passed value(s).\r\n */\r\nexport const createOrKeepArray = <T>(value: T | T[]): T[] => (isArray(value) ? value : [value]);\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strVisible = 'visible';\r\nexport const strHidden = 'hidden';\r\nexport const strScroll = 'scroll';\r\n\r\nexport const capitalizeFirstLetter = (str: string | number | false | null | undefined): string => {\r\n  const finalStr = String(str || '');\r\n  return finalStr ? finalStr[0].toUpperCase() + finalStr.slice(1) : '';\r\n};\r\n","import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T> | ReadonlyArray<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: Partial<WH<T>>, b?: Partial<WH<T>>) =>\r\n  equal<Partial<WH<T>>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: Partial<XY<T>>, b?: Partial<XY<T>>) =>\r\n  equal<Partial<XY<T>>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n","export const noop = () => {}; // eslint-disable-line\r\n","import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let clear = noop;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      // @ts-ignore\r\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n      clear = () => clearTimeoutFn(timeoutId);\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n","import { mathMax, mathMin } from './alias';\r\n\r\n/**\r\n * Caps the passed number between the `min` and `max` bounds.\r\n * @param min The min bound.\r\n * @param max The max bound.\r\n * @param number The number to be capped.\r\n * @returns The capped number between min and max.\r\n */\r\nexport const capNumber = (min: number, max: number, number: number) =>\r\n  mathMax(min, mathMin(max, number));\r\n","import type { HTMLElementTarget } from './types';\r\nimport { bind, each, from, isArray } from '../utils';\r\n\r\nexport type AttributeElementTarget = HTMLElementTarget | Element;\r\n\r\nexport type DomTokens = string | string[] | false | null | undefined | void;\r\n\r\nexport const getDomTokensArray = (tokens: DomTokens) =>\r\n  from(new Set((isArray(tokens) ? tokens : (tokens || '').split(' ')).filter((token) => token)));\r\n\r\n/**\r\n * Gets a attribute with the given attribute of the given element.\r\n * @param elm The element of which the attribute shall be get.\r\n * @param attrName The attribute name which shall be get.\r\n * @returns The attribute value or `null` when the attribute is not set or `false` if the element is undefined.\r\n */\r\nexport const getAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.getAttribute(attrName);\r\n\r\n/**\r\n * Returns whether the given attribute exists on the given element.\r\n * @param elm The element.\r\n * @param attrName The attribute.\r\n * @returns A Truthy value indicates a present attrubte.\r\n */\r\nexport const hasAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.hasAttribute(attrName);\r\n\r\n/**\r\n * Sets the given attributes to the given element.\r\n * @param elm The element of which the attributes shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const setAttrs = (\r\n  elm: AttributeElementTarget,\r\n  attrNames: string | string[],\r\n  value: string | number | false | null | undefined\r\n) => {\r\n  each(getDomTokensArray(attrNames), (attrName) => {\r\n    elm && elm.setAttribute(attrName, String(value || ''));\r\n  });\r\n};\r\n\r\n/**\r\n * Removes the given attributes from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const removeAttrs = (elm: AttributeElementTarget, attrNames: string | string[]): void => {\r\n  each(getDomTokensArray(attrNames), (attrName) => elm && elm.removeAttribute(attrName));\r\n};\r\n\r\nexport const domTokenListAttr = (elm: AttributeElementTarget, attrName: string) => {\r\n  const initialArr = getDomTokensArray(getAttr(elm, attrName));\r\n  const setElmAttr = bind(setAttrs, elm, attrName);\r\n  const domTokenListOperation = (operationTokens: DomTokens, operation: 'add' | 'delete') => {\r\n    const initialArrSet = new Set(initialArr);\r\n    each(getDomTokensArray(operationTokens), (token) => {\r\n      initialArrSet[operation](token);\r\n    });\r\n    return from(initialArrSet).join(' ');\r\n  };\r\n\r\n  return {\r\n    _remove: (removeTokens: DomTokens) => setElmAttr(domTokenListOperation(removeTokens, 'delete')),\r\n    _add: (addTokens: DomTokens) => setElmAttr(domTokenListOperation(addTokens, 'add')),\r\n    _has: (hasTokens: DomTokens) => {\r\n      const tokenSet = getDomTokensArray(hasTokens);\r\n      return tokenSet.reduce(\r\n        (boolean, token) => boolean && initialArr.includes(token),\r\n        tokenSet.length > 0\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be removed.\r\n * @param value The value which shall be removed.\r\n */\r\nexport const removeAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._remove(value);\r\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n  return bind(addAttrClass, elm, attrName, value);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds value to it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added.\r\n * @param value The value which shall be added.\r\n */\r\nexport const addAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._add(value);\r\n  return bind(removeAttrClass, elm, attrName, value);\r\n};\r\n\r\nexport const addRemoveAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens,\r\n  add?: boolean\r\n) => (add ? addAttrClass : removeAttrClass)(elm, attrName, value);\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): boolean => domTokenListAttr(elm, attrName)._has(value);\r\n","import type { HTMLElementTarget } from './types';\r\nimport type { DomTokens } from './attribute';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { domTokenListAttr } from './attribute';\r\n\r\nconst createDomTokenListClass = (elm: HTMLElementTarget) => domTokenListAttr(elm, 'class');\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: HTMLElementTarget, className: DomTokens): boolean =>\r\n  createDomTokenListClass(elm)._has(className);\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: HTMLElementTarget, className: DomTokens): void => {\r\n  createDomTokenListClass(elm)._remove(className);\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: HTMLElementTarget, className: DomTokens): (() => void) => {\r\n  createDomTokenListClass(elm)._add(className);\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (\r\n  classNameA: string | false | null | undefined,\r\n  classNameB: string | false | null | undefined\r\n) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n","import { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\ntype InputElementType = Node | Element | false | null | undefined;\r\ntype OutputElementType = Node | Element | false | null | undefined;\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    return elm.matches(selector);\r\n  }\r\n  return false;\r\n};\r\n\r\nconst isBodyElement = (elm: InputElementType) => is(elm, 'body'); // don't do targetElement === ownerDocument.body in case initialization happens in memory\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => elm && elm.parentElement;\r\n\r\n/**\r\n * Returns the closest element to the passed element which matches the given selector.\r\n * @param elm The element.\r\n * @param selector The selector.\r\n * @returns The closest element to the passed element which matches the given selector.\r\n */\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType =>\r\n  isElement(elm) && elm.closest(selector);\r\n\r\n/**\r\n * Gets the focused element of the passed or default document.\r\n * @returns The focused element of the passed document.\r\n */\r\nconst getFocusedElement = (doc?: Document) => (doc || document).activeElement;\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n\r\nexport {\r\n  find,\r\n  findFirst,\r\n  is,\r\n  isBodyElement,\r\n  children,\r\n  contents,\r\n  parent,\r\n  liesBetween,\r\n  closest,\r\n  getFocusedElement,\r\n};\r\n","import { isArrayLike } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { noop } from '../utils/noop';\r\nimport { parent } from './traversal';\r\n\r\ntype ManipulationTarget = Node | false | null | undefined;\r\ntype NodeCollection = ArrayLike<Node> | ManipulationTarget;\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    const parentElm = parent(nodes);\r\n    parentElm && parentElm.removeChild(nodes);\r\n  }\r\n};\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nconst before = (\r\n  parentElm: ManipulationTarget,\r\n  preferredAnchor: ManipulationTarget,\r\n  insertedElms: NodeCollection\r\n): (() => void) => {\r\n  if (insertedElms && parentElm) {\r\n    let anchor: ManipulationTarget = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    if (isArrayLike(insertedElms)) {\r\n      fragment = document.createDocumentFragment();\r\n\r\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n      each(insertedElms, (insertedElm) => {\r\n        if (insertedElm === anchor) {\r\n          anchor = insertedElm.previousSibling;\r\n        }\r\n        fragment!.appendChild(insertedElm);\r\n      });\r\n    } else {\r\n      fragment = insertedElms;\r\n    }\r\n\r\n    // if the preferred anchor isn't null set it to a valid anchor\r\n    if (preferredAnchor) {\r\n      if (!anchor) {\r\n        anchor = parentElm.firstChild;\r\n      } else if (anchor !== preferredAnchor) {\r\n        anchor = anchor.nextSibling;\r\n      }\r\n    }\r\n\r\n    parentElm.insertBefore(fragment, anchor || null);\r\n    return () => removeElements(insertedElms);\r\n  }\r\n  return noop;\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: ManipulationTarget, children: NodeCollection) =>\r\n  before(node, null, children);\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const prependChildren = (node: ManipulationTarget, children: NodeCollection) =>\r\n  before(node, node && node.firstChild, children);\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertBefore = (node: ManipulationTarget, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node, insertedNodes);\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertAfter = (node: ManipulationTarget, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n","import { each } from '../utils/array';\r\nimport { setAttrs } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  setAttrs(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport type { HTMLElementTarget } from './types';\r\nimport { wnd } from '../utils/alias';\r\nimport { each, from } from '../utils/array';\r\nimport { isString, isNumber, isObject } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst customCssPropRegex = /^--/;\r\n\r\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\r\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${(validFiniteNumber(ratio) * 100).toFixed(3)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${validFiniteNumber(number)}px`;\r\n\r\nexport function setStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObject | false | null | undefined\r\n): void {\r\n  elm &&\r\n    styles &&\r\n    each(styles, (rawValue: StyleObjectValue, name) => {\r\n      try {\r\n        const elmStyle = elm.style;\r\n        const value = isNumber(rawValue) ? numberToCssPx(rawValue) : (rawValue || '') + '';\r\n\r\n        if (customCssPropRegex.test(name)) {\r\n          elmStyle.setProperty(name, value);\r\n        } else {\r\n          elmStyle[name as any] = value;\r\n        }\r\n      } catch {}\r\n    });\r\n}\r\n\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey>,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): string;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey> | StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>> | string {\r\n  const getSingleStyle = isString(styles);\r\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n\r\n  if (elm) {\r\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\r\n    getStylesResult = getSingleStyle\r\n      ? getCSSVal(computedStyle, styles)\r\n      : from(styles).reduce((result, key) => {\r\n          result[key] = getCSSVal(computedStyle, key);\r\n          return result;\r\n        }, getStylesResult as PlainObject);\r\n  }\r\n  return getStylesResult;\r\n}\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElementTarget,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = getStyles(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n","import type { HTMLElementTarget } from './types';\r\nimport { getStyles } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const getWindowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const getOffsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getClientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getScrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const getFractionalSize = (elm: HTMLElementTarget): Readonly<WH> => {\r\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElementTarget): boolean =>\r\n  !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n","import type { DomTokens } from './attribute';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { keys } from '../utils';\r\nimport { getDomTokensArray } from './attribute';\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerTarget = EventTarget | false | null | undefined;\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: ((event: any) => any) | false | null | undefined;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(getDomTokensArray(eventNames), (eventName) => {\r\n    target && target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: ((event: T) => any) | false | null | undefined,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const passive = (options && options._passive) ?? true;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions = {\r\n    passive,\r\n    capture,\r\n  };\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    getDomTokensArray(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener && listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target && target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventListenerTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import type { XY } from './offset';\r\nimport type { WH } from './dimensions';\r\nimport { capNumber, isNumber, mathAbs, mathSign } from '../utils';\r\n\r\nexport interface ScrollCoordinates {\r\n  /** The start (origin) scroll coordinates for each axis. */\r\n  _start: XY<number>;\r\n  /** The end scroll coordinates for each axis. */\r\n  _end: XY<number>;\r\n}\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY<number | false | null | undefined>> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElementScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n\r\n/**\r\n * Scroll Coordinates which are 0.\r\n */\r\nexport const getZeroScrollCoordinates = (): ScrollCoordinates => ({\r\n  _start: { x: 0, y: 0 },\r\n  _end: { x: 0, y: 0 },\r\n});\r\n\r\n/**\r\n * Sanatizes raw scroll coordinates.\r\n * The passed `overflowAmount` is used as the \"max\" value for each axis if the sign of the raw max value is not `0`.\r\n * Makes sure that each axis has `0` either in the start or end coordinates.\r\n * @param rawScrollCoordinates The raw scroll coordinates.\r\n * @param overflowAmount The overflow amount.\r\n * @returns\r\n */\r\nexport const sanatizeScrollCoordinates = (\r\n  rawScrollCoordinates: ScrollCoordinates,\r\n  overflowAmount: WH<number>\r\n) => {\r\n  const { _start, _end } = rawScrollCoordinates;\r\n  const { w, h } = overflowAmount;\r\n  const sanitizeAxis = (start: number, end: number, amount: number) => {\r\n    let newStart = mathSign(start) * amount;\r\n    let newEnd = mathSign(end) * amount;\r\n\r\n    if (newStart === newEnd) {\r\n      const startAbs = mathAbs(start);\r\n      const endAbs = mathAbs(end);\r\n\r\n      newEnd = startAbs > endAbs ? 0 : newEnd;\r\n      newStart = startAbs < endAbs ? 0 : newStart;\r\n    }\r\n    return [newStart + 0, newEnd + 0] as const; // \"+ 0\" prevents \"-0\" to be in the result\r\n  };\r\n\r\n  const [startX, endX] = sanitizeAxis(_start.x, _end.x, w);\r\n  const [startY, endY] = sanitizeAxis(_start.y, _end.y, h);\r\n\r\n  return {\r\n    _start: {\r\n      x: startX,\r\n      y: startY,\r\n    },\r\n    _end: {\r\n      x: endX,\r\n      y: endY,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Returns whether the passed scroll coordinates represent the browsers default scroll direction.\r\n * For the default scroll direction the following must be true:\r\n * 1. Start value is `0`.\r\n * 2. End value <= Start value.\r\n * @param scrollCoordinates The scroll coordinates.\r\n */\r\nexport const isDefaultDirectionScrollCoordinates = ({\r\n  _start,\r\n  _end,\r\n}: ScrollCoordinates): XY<boolean> => {\r\n  const getAxis = (start: number, end: number) => start === 0 && start <= end;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x),\r\n    y: getAxis(_start.y, _end.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the current scroll percent between 0..1 for each axis.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param currentScroll The current scroll position of the element.\r\n */\r\nexport const getScrollCoordinatesPercent = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  currentScroll: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, current: number) =>\r\n    capNumber(0, 1, (start - current) / (start - end) || 0);\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, currentScroll.x),\r\n    y: getAxis(_start.y, _end.y, currentScroll.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the scroll position of the given percent.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param percent The percentage of the scroll.\r\n */\r\nexport const getScrollCoordinatesPosition = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  percent: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, p: number) => start + (end - start) * p;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, percent.x),\r\n    y: getAxis(_start.y, _end.y, percent.y),\r\n  };\r\n};\r\n","import { isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(createOrKeepArray(listener), callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n","import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether its possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether its possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: boolean;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n","import { strOverflowX, strOverflowY } from './support';\r\n\r\nconst dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentScrollbarHidden = `${classNameEnvironment}-scrollbar-hidden`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// shared\r\nexport const dataValueNoClipping = 'noClipping';\r\n\r\n// body\r\nexport const dataAttributeHtmlBody = `${dataAttributePrefix}-body`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataValueHostIsHost = 'host';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportOverflowXPrefix = strOverflowX;\r\nexport const dataValueViewportOverflowYPrefix = strOverflowY;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportMeasuring = 'measuring';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportScrollbarPressed = 'scrollbarPressed';\r\nexport const dataValueViewportNoContent = 'noContent';\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  appendChildren,\r\n  getFractionalSize,\r\n  getClientSize,\r\n  getOffsetSize,\r\n  removeAttrs,\r\n  removeElements,\r\n  assignDeep,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  getStyles,\r\n  isBodyElement,\r\n  isFunction,\r\n  addEventListener,\r\n} from '~/support';\r\nimport { classNameEnvironment, classNameEnvironmentScrollbarHidden } from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\nexport interface Env {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: Env;\r\n\r\nconst createEnvironment = (): Env => {\r\n  const getNativeScrollbarSize = (\r\n    measureElm: HTMLElement,\r\n    measureElmChild: HTMLElement,\r\n    clear?: boolean\r\n  ): XY => {\r\n    // fix weird safari issue where getComputedStyle returns all empty styles by appending twice\r\n    appendChildren(document.body, measureElm);\r\n    appendChildren(document.body, measureElm);\r\n\r\n    const cSize = getClientSize(measureElm);\r\n    const oSize = getOffsetSize(measureElm);\r\n    const fSize = getFractionalSize(measureElmChild);\r\n\r\n    clear && removeElements(measureElm);\r\n\r\n    return {\r\n      x: oSize.h - cSize.h + fSize.h,\r\n      y: oSize.w - cSize.w + fSize.w,\r\n    };\r\n  };\r\n\r\n  const getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n    let result = false;\r\n    const revertClass = addClass(testElm, classNameEnvironmentScrollbarHidden);\r\n    try {\r\n      result =\r\n        getStyles(testElm, 'scrollbar-width' as StyleObjectKey) === 'none' ||\r\n        getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\r\n    } catch {}\r\n    revertClass();\r\n    return result;\r\n  };\r\n\r\n  // changes to this styles need to be reflected in the \"hide native scrollbars\" section of the structure styles\r\n  const envStyle = `.${classNameEnvironment}{scroll-behavior:auto!important;position:fixed;opacity:0;visibility:hidden;overflow:scroll;height:200px;width:200px;z-index:-1}.${classNameEnvironment} div{width:200%;height:200%;margin:10px 0}.${classNameEnvironmentScrollbarHidden}{scrollbar-width:none!important}.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar,.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar-corner{appearance:none!important;display:none!important;width:0!important;height:0!important}`;\r\n  const envDOM = createDOM(\r\n    `<div class=\"${classNameEnvironment}\"><div></div><style>${envStyle}</style></div>`\r\n  );\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) => nativeScrollbarsHiding && isBodyElement(target) && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: Env = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _scrollTimeline: !!scrollT,\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttrs(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  addEventListener(wnd, 'resize', () => {\r\n    triggerEvent('r', []);\r\n  });\r\n\r\n  if (\r\n    isFunction(wnd.matchMedia) &&\r\n    !nativeScrollbarsHiding &&\r\n    (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)\r\n  ) {\r\n    const addZoomListener = (onZoom: () => void) => {\r\n      const media = wnd.matchMedia(`(resolution: ${wnd.devicePixelRatio}dppx)`);\r\n      addEventListener(\r\n        media,\r\n        'change',\r\n        () => {\r\n          onZoom();\r\n          addZoomListener(onZoom);\r\n        },\r\n        {\r\n          _once: true,\r\n        }\r\n      );\r\n    };\r\n    addZoomListener(() => {\r\n      const [updatedNativeScrollbarSize, nativeScrollbarSizeChanged] =\r\n        updateNativeScrollbarSizeCache();\r\n\r\n      assignDeep(env._nativeScrollbarsSize, updatedNativeScrollbarSize); // keep the object and just re-assign!\r\n      triggerEvent('r', [nativeScrollbarSizeChanged]);\r\n    });\r\n  }\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): Env => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nexport type StaticInitialization = HTMLElement | false | null;\r\nexport type DynamicInitialization = HTMLElement | boolean | null;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n  getAttr,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[] | readonly string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames, (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        // isAttrChange check needed, otherwise mutationTarget might not be a valid HTMLElement\r\n        const attributeValue =\r\n          (isAttrChange && getAttr(mutationTarget as HTMLElement, attributeName || '')) || null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n","import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: booleanAllowedValues, // true || false\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  appendChildren,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = getOffsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = getOffsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        setStyles(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n","import { strHidden, strScroll, strVisible } from '~/support';\r\nimport type { Env } from '~/environment';\r\nimport type { XY } from '~/support';\r\nimport type { Options, OptionsCheckFn, OverflowBehavior } from '~/options';\r\nimport type { OverflowStyle } from '~/typings';\r\n\r\nexport interface ViewportOverflowState {\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport const getShowNativeOverlaidScrollbars = (checkOption: OptionsCheckFn<Options>, env: Env) => {\r\n  const { _nativeScrollbarsOverlaid } = env;\r\n  const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = checkOption(\r\n    'showNativeOverlaidScrollbars'\r\n  );\r\n\r\n  return [\r\n    showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y,\r\n    showNativeOverlaidScrollbarsChanged,\r\n  ] as const;\r\n};\r\n\r\nexport const overflowIsVisible = (overflowBehavior: string) =>\r\n  overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Creates a viewport overflow state object.\r\n * @param hasOverflow The information whether an axis has overflow.\r\n * @param overflowBehavior The overflow behavior according to the options.\r\n * @returns A object which represents the newly set overflow state.\r\n */\r\nexport const createViewportOverflowState = (\r\n  hasOverflow: Partial<XY<boolean>>,\r\n  overflowBehavior: XY<OverflowBehavior>\r\n): ViewportOverflowState => {\r\n  const getAxisOverflowStyle = (\r\n    axisBehavior: OverflowBehavior,\r\n    axisHasOverflow: boolean | undefined,\r\n    perpendicularBehavior: OverflowBehavior,\r\n    perpendicularOverflow: boolean | undefined\r\n  ): OverflowStyle => {\r\n    // convert behavior to style:\r\n    // 'visible'        -> 'hidden'\r\n    // 'hidden'         -> 'hidden'\r\n    // 'scroll'         -> 'scroll'\r\n    // 'visible-hidden' -> 'hidden'\r\n    // 'visible-scroll' -> 'scroll'\r\n    const behaviorStyle =\r\n      axisBehavior === strVisible\r\n        ? strHidden\r\n        : (axisBehavior.replace(`${strVisible}-`, '') as OverflowStyle);\r\n    const axisOverflowVisible = overflowIsVisible(axisBehavior);\r\n    const perpendicularOverflowVisible = overflowIsVisible(perpendicularBehavior);\r\n\r\n    // if no axis has overflow set 'hidden'\r\n    if (!axisHasOverflow && !perpendicularOverflow) {\r\n      return strHidden;\r\n    }\r\n\r\n    // if both axis have a visible behavior ('visible', 'visible-hidden', 'visible-scroll') set 'visible'\r\n    if (axisOverflowVisible && perpendicularOverflowVisible) {\r\n      return strVisible;\r\n    }\r\n\r\n    // this this axis has a visible behavior\r\n    if (axisOverflowVisible) {\r\n      const nonPerpendicularOverflow = axisHasOverflow ? strVisible : strHidden;\r\n      return axisHasOverflow && perpendicularOverflow\r\n        ? behaviorStyle // if both axis have an overflow set ('hidden' or 'scroll')\r\n        : nonPerpendicularOverflow; // if only this axis has an overflow set 'visible', if no axis has an overflow set 'hidden'\r\n    }\r\n\r\n    const nonOverflow =\r\n      perpendicularOverflowVisible && perpendicularOverflow ? strVisible : strHidden;\r\n    return axisHasOverflow\r\n      ? behaviorStyle // if this axis has an overflow\r\n      : nonOverflow; // if the perp. axis has a visible behavior and has an overflow set 'visible', otherwise set 'hidden'\r\n  };\r\n\r\n  const _overflowStyle = {\r\n    x: getAxisOverflowStyle(overflowBehavior.x, hasOverflow.x, overflowBehavior.y, hasOverflow.y),\r\n    y: getAxisOverflowStyle(overflowBehavior.y, hasOverflow.y, overflowBehavior.x, hasOverflow.x),\r\n  };\r\n\r\n  return {\r\n    _overflowStyle,\r\n    _overflowScroll: {\r\n      x: _overflowStyle.x === strScroll,\r\n      y: _overflowStyle.y === strScroll,\r\n    },\r\n  };\r\n};\r\n","import {\r\n  keys,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  getStyles,\r\n  setStyles,\r\n  removeAttrClass,\r\n  strWidth,\r\n  strOverflowY,\r\n  strOverflowX,\r\n  strScroll,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport { getShowNativeOverlaidScrollbars } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { ObserversSetupState } from '~/setups';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type { ViewportOverflowState } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { Env } from '~/environment';\r\nimport type { WH } from '~/support';\r\nimport type { OverflowStyle, StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _viewportArrangement: (\r\n        structureSetupElements: StructureSetupElementsObj,\r\n        structureSetupState: StructureSetupState,\r\n        observersSetupState: ObserversSetupState,\r\n        env: Env,\r\n        checkOptions: OptionsCheckFn<Options>\r\n      ) => {\r\n        const { _viewportIsTarget, _viewport } = structureSetupElements;\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _nativeScrollbarsSize } = env;\r\n        const doViewportArrange =\r\n          !_viewportIsTarget &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const [showNativeOverlaidScrollbars] = getShowNativeOverlaidScrollbars(checkOptions, env);\r\n\r\n        /**\r\n         * Gets the current overflow state of the viewport.\r\n         */\r\n        const readViewportOverflowState = (): ViewportOverflowState => {\r\n          const getStatePerAxis = (styleKey: StyleObjectKey) => {\r\n            const overflowStyle = getStyles(_viewport, styleKey) as OverflowStyle;\r\n            const overflowScroll = overflowStyle === strScroll;\r\n\r\n            return [overflowStyle, overflowScroll] as const;\r\n          };\r\n\r\n          const [xOverflowStyle, xOverflowScroll] = getStatePerAxis(strOverflowX);\r\n          const [yOverflowStyle, yOverflowScroll] = getStatePerAxis(strOverflowY);\r\n\r\n          return {\r\n            _overflowStyle: {\r\n              x: xOverflowStyle,\r\n              y: yOverflowStyle,\r\n            },\r\n            _overflowScroll: {\r\n              x: xOverflowScroll,\r\n              y: yOverflowScroll,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Gets the hide offset matching the passed overflow state.\r\n         * @param viewportOverflowState The overflow state of the viewport\r\n         */\r\n        const _getViewportOverflowHideOffset = (viewportOverflowState: ViewportOverflowState) => {\r\n          const { _overflowScroll } = viewportOverflowState;\r\n          const arrangeHideOffset =\r\n            _nativeScrollbarsHiding || showNativeOverlaidScrollbars ? 0 : 42;\r\n\r\n          const getHideOffsetPerAxis = (\r\n            isOverlaid: boolean,\r\n            overflowScroll: boolean,\r\n            nativeScrollbarSize: number\r\n          ) => {\r\n            const nonScrollbarStylingHideOffset = isOverlaid\r\n              ? arrangeHideOffset\r\n              : nativeScrollbarSize;\r\n            const scrollbarsHideOffset =\r\n              overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n            const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n            return [scrollbarsHideOffset, scrollbarsHideOffsetArrange] as const;\r\n          };\r\n\r\n          const [xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.x,\r\n            _overflowScroll.x,\r\n            _nativeScrollbarsSize.x\r\n          );\r\n          const [yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.y,\r\n            _overflowScroll.y,\r\n            _nativeScrollbarsSize.y\r\n          );\r\n\r\n          return {\r\n            _scrollbarsHideOffset: {\r\n              x: xScrollbarsHideOffset,\r\n              y: yScrollbarsHideOffset,\r\n            },\r\n            _scrollbarsHideOffsetArrange: {\r\n              x: xScrollbarsHideOffsetArrange,\r\n              y: yScrollbarsHideOffsetArrange,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Hides the native scrollbars according to the passed parameters.\r\n         * @param viewportOverflowState The viewport overflow state.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n         * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n         */\r\n        const _hideNativeScrollbars = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          { _directionIsRTL }: ObserversSetupState,\r\n          viewportArrange: boolean\r\n        ): StyleObject | undefined => {\r\n          if (!_viewportIsTarget) {\r\n            const viewportStyleObj: StyleObject = assignDeep(\r\n              {},\r\n              {\r\n                [strMarginRight]: 0,\r\n                [strMarginBottom]: 0,\r\n                [strMarginLeft]: 0,\r\n              }\r\n            );\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const horizontalMarginKey: keyof StyleObject = _directionIsRTL\r\n              ? strMarginLeft\r\n              : strMarginRight;\r\n            const viewportHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingLeft\r\n              : strPaddingRight;\r\n            const horizontalMarginValue = _viewportPaddingStyle[horizontalMarginKey] as number;\r\n            const verticalMarginValue = _viewportPaddingStyle[strMarginBottom] as number;\r\n            const horizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportHorizontalPaddingKey\r\n            ] as number;\r\n            const verticalPaddingValue = _viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n            // horizontal\r\n            viewportStyleObj[strWidth] = `calc(100% + ${\r\n              hideOffsetY + horizontalMarginValue * -1\r\n            }px)`;\r\n            viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n            // vertical\r\n            viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n            // viewport arrange additional styles\r\n            if (viewportArrange) {\r\n              viewportStyleObj[viewportHorizontalPaddingKey] =\r\n                horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n              viewportStyleObj[strPaddingBottom] =\r\n                verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n            }\r\n\r\n            return viewportStyleObj;\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const _arrangeViewport = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          viewportScrollSize: WH<number>,\r\n          sizeFraction: WH<number>\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _directionIsRTL } = observersSetupState;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            setStyles(_viewport, {\r\n              '--os-vaw': arrangeSize.w,\r\n              '--os-vah': arrangeSize.h,\r\n            });\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const _undoViewportArrange = (viewportOverflowState?: ViewportOverflowState) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState = viewportOverflowState || readViewportOverflowState();\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffsetArrange } = _getViewportOverflowHideOffset(\r\n              finalViewportOverflowState\r\n            );\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = getStyles(_viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n            const addArrange = removeAttrClass(\r\n              _viewport,\r\n              dataAttributeViewport,\r\n              dataValueViewportArrange\r\n            );\r\n\r\n            setStyles(_viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                setStyles(\r\n                  _viewport,\r\n                  assignDeep(\r\n                    {},\r\n                    prevStyle,\r\n                    _hideNativeScrollbars(\r\n                      finalViewportOverflowState,\r\n                      observersSetupState,\r\n                      doViewportArrange\r\n                    )\r\n                  )\r\n                );\r\n                addArrange();\r\n              },\r\n              finalViewportOverflowState,\r\n            ] as const;\r\n          }\r\n          return [noop] as const;\r\n        };\r\n\r\n        return {\r\n          _getViewportOverflowHideOffset,\r\n          _arrangeViewport,\r\n          _undoViewportArrange,\r\n          _hideNativeScrollbars,\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n","import { animateNumber, noop, setT } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        getHandleOffset: (handleRect?: DOMRect, trackRect?: DOMRect) => number,\r\n        startOffset: number,\r\n        handleLength: number,\r\n        relativeTrackPointerOffset: number\r\n      ): (() => void) => {\r\n        // click scroll animation\r\n        let iteration = 0;\r\n        let clear = noop;\r\n        const animateClickScroll = (clickScrollProgress: number) => {\r\n          clear = animateNumber(\r\n            clickScrollProgress,\r\n            clickScrollProgress + handleLength * Math.sign(startOffset),\r\n            133,\r\n            (animationProgress, _, animationCompleted) => {\r\n              moveHandleRelative(animationProgress);\r\n              const handleStartBound = getHandleOffset();\r\n              const handleEndBound = handleStartBound + handleLength;\r\n              const mouseBetweenHandleBounds =\r\n                relativeTrackPointerOffset >= handleStartBound &&\r\n                relativeTrackPointerOffset <= handleEndBound;\r\n\r\n              if (animationCompleted && !mouseBetweenHandleBounds) {\r\n                if (iteration) {\r\n                  animateClickScroll(animationProgress);\r\n                } else {\r\n                  const firstIterationPauseTimeout = setT(() => {\r\n                    animateClickScroll(animationProgress);\r\n                  }, 222);\r\n                  clear = () => {\r\n                    clearTimeout(firstIterationPauseTimeout);\r\n                  };\r\n                }\r\n                iteration++;\r\n              }\r\n            }\r\n          );\r\n        };\r\n\r\n        animateClickScroll(0);\r\n\r\n        return () => clear();\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n","import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  appendChildren,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const { _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (sizeChangedContext?: ResizeObserverEntry | boolean) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        appear = domRectAppeared(currRContentRect, prevContentRect);\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _sizeChanged: true,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n","import {\r\n  createDiv,\r\n  getOffsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = getOffsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n","import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  each,\r\n  equalWH,\r\n  getFractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  isString,\r\n  keys,\r\n  liesBetween,\r\n  removeAttrs,\r\n  getScrollSize,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  inArray,\r\n  domRectAppeared,\r\n  concat,\r\n  getAttr,\r\n  setAttrs,\r\n  getStyles,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueViewportMeasuring,\r\n  dataValueViewportArrange,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo, StructureSetupState } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  getCurrentOption: OptionsCheckFn<Options>,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n  let prevDirectionIsRTL: boolean | undefined;\r\n\r\n  const { _nativeScrollbarsHiding } = getEnvironment();\r\n\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const viewportAttrsFromTarget = ['tabindex'] as const;\r\n  const baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'] as const;\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open'] as const;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _scrollOffsetElement,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n\r\n  const getDirectionIsRTL = (elm: HTMLElement): boolean => getStyles(elm, 'direction') === 'rtl';\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(_target),\r\n  };\r\n  const env = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const _undoViewportArrange =\r\n        scrollbarsHidingPlugin &&\r\n        scrollbarsHidingPlugin._viewportArrangement(\r\n          structureSetupElements,\r\n          structureSetupState,\r\n          state,\r\n          env,\r\n          getCurrentOption\r\n        )._undoViewportArrange;\r\n\r\n      const isArranged = !_viewportIsTarget && _viewportHasClass(dataValueViewportArrange);\r\n      const scrollOffset = isArranged && getElementScroll(_scrollOffsetElement);\r\n\r\n      const revertMeasuring = _viewportAddRemoveClass(dataValueViewportMeasuring, true);\r\n      const redoViewportArrange = isArranged && _undoViewportArrange && _undoViewportArrange()[0];\r\n\r\n      const contentScroll = getScrollSize(_content);\r\n      const viewportScroll = getScrollSize(_viewport);\r\n      const fractional = getFractionalSize(_viewport);\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      revertMeasuring();\r\n\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : concat(baseStyleChangingAttrs, baseStyleChangingAttrsTextarea);\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const setDirection = (updateHints: ObserversSetupUpdateHints) => {\r\n    const newDirectionIsRTL = getDirectionIsRTL(_target);\r\n    assignDeep(updateHints, { _directionChanged: prevDirectionIsRTL !== newDirectionIsRTL });\r\n    assignDeep(state, { _directionIsRTL: newDirectionIsRTL });\r\n    prevDirectionIsRTL = newDirectionIsRTL;\r\n  };\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (inArray(viewportAttrsFromTarget, attribute)) {\r\n        const hostAttr = getAttr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          setAttrs(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttrs(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({ _sizeChanged, _appear }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && _nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    updateFn(updateHints);\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _hostMutation: targetStyleChanged,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const { _addResizeListener } = env;\r\n  const [constructTrinsicObserver, updateTrinsicObserver] = _content\r\n    ? createTrinsicObserver(_host, onTrinsicChanged)\r\n    : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: concat(baseStyleChangingAttrs, viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = _addResizeListener((_scrollbarSizeChanged) => {\r\n        const [, _contentMutation] = updateContentSizeCache();\r\n        onObserversUpdatedDebounced({ _scrollbarSizeChanged, _contentMutation });\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(contentMutationObserverAttr, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      setDirection(updateHints);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isBoolean,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  bind,\r\n  getElementScroll,\r\n  inArray,\r\n  strWidth,\r\n  strHeight,\r\n  concat,\r\n  assignDeep,\r\n  ratioToCssPercent,\r\n  numberToCssPx,\r\n  setStyles,\r\n  createOrKeepArray,\r\n  getBoundingClientRect,\r\n  capNumber,\r\n  getScrollCoordinatesPercent,\r\n  isDefaultDirectionScrollCoordinates,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type { XY } from '~/support';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollTimeline: AnimationTimeline | undefined;\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\ntype PotentialAnimation = Animation | false | null | undefined;\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const elementAnimations = new Map<HTMLElement, PotentialAnimation[]>();\r\n  const initScrollTimeline = (axis: keyof XY<unknown>) =>\r\n    scrollT &&\r\n    new scrollT({\r\n      source: _scrollOffsetElement,\r\n      axis,\r\n    });\r\n  const scrollTimeline = {\r\n    x: initScrollTimeline('x'),\r\n    y: initScrollTimeline('y'),\r\n  };\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n\r\n  /**\r\n   * Gets the scrollbar handle length ratio.\r\n   * @param isHorizontal Whether the axis is horizontal.\r\n   * @param scrollbarStructure The scrollbar structure. Only passed when the length ratio is calculated for the offset ratio (respects handle min. & max. size via. css)\r\n   * @returns The scrollbar handle length ratio.\r\n   */\r\n  const getScrollbarHandleLengthRatio = (\r\n    isHorizontal: boolean | undefined,\r\n    scrollbarStructure?: ScrollbarStructure\r\n  ) => {\r\n    if (scrollbarStructure) {\r\n      const axis = isHorizontal ? strWidth : strHeight;\r\n      const { _track, _handle } = scrollbarStructure;\r\n\r\n      const handleSize = getBoundingClientRect(_handle)[axis];\r\n      const trackSize = getBoundingClientRect(_track)[axis];\r\n\r\n      return capNumber(0, 1, handleSize / trackSize || 0);\r\n    }\r\n\r\n    const axis = isHorizontal ? 'x' : 'y';\r\n    const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n\r\n    const viewportSize = _overflowEdge[axis];\r\n    const overflowAmount = _overflowAmount[axis];\r\n\r\n    return capNumber(0, 1, viewportSize / (viewportSize + overflowAmount) || 0);\r\n  };\r\n\r\n  /**\r\n   * Gets the scrollbar handle offset ratio.\r\n   * @param structureSetupState The structure setup state.\r\n   * @param scrollbarStructure The scrollbar structure.\r\n   * @param scrollPercent The scroll percent 0..1.\r\n   * @param isHorizontal Whether the axis is horizontal.\r\n   * @returns The scrollbar handle offset ratio.\r\n   */\r\n  const getScrollbarHandleOffsetRatio = (\r\n    scrollbarStructure: ScrollbarStructure,\r\n    scrollPercent: number,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const lengthRatio = getScrollbarHandleLengthRatio(isHorizontal, scrollbarStructure);\r\n\r\n    return (1 / lengthRatio) * (1 - lengthRatio) * scrollPercent;\r\n  };\r\n\r\n  /**\r\n   * Adds additional directional keyframes to the passed keyframes.\r\n   * @param keyframes The keyframes.\r\n   * @param directionRTL Whether the direction is RTL.\r\n   * @returns The passed keyframes with additional directional keyframes.\r\n   */\r\n  const addDirectionRTLKeyframes = (keyframes: Keyframe[] | PropertyIndexedKeyframes | null) =>\r\n    assignDeep(keyframes, {\r\n      // dummy keyframe which fixes bug where the scrollbar handle is reverted to origin position when it should be at its max position\r\n      clear: ['left'],\r\n    });\r\n\r\n  /**\r\n   * Cancels the animations of the passed elements or of all elements if no elements are passed.\r\n   * @param elements The elements of which the animation shall be canceled.\r\n   */\r\n  const cancelElementAnimations = (elements?: HTMLElement | HTMLElement[]) => {\r\n    elementAnimations.forEach((currAnimations, element) => {\r\n      const doCancel = elements ? inArray(createOrKeepArray(elements), element) : true;\r\n      if (doCancel) {\r\n        each(currAnimations || [], (animation) => {\r\n          animation && animation.cancel();\r\n        });\r\n        elementAnimations.delete(element);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Sets of overwrites the animation of the passed element.\r\n   * @param element The element of which the animation shall be set.\r\n   * @param timeline The animation timeline of the animation.\r\n   * @param keyframes The keyframes of the animation.\r\n   * @param composite The composite information of the animation.\r\n   */\r\n  const setElementAnimation = (\r\n    element: HTMLElement,\r\n    timeline: AnimationTimeline,\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    composite?: CompositeOperation\r\n  ) => {\r\n    const activeAnimations = elementAnimations.get(element) || [];\r\n    const activeAnimation = activeAnimations.find(\r\n      (animation) => animation && animation.timeline === timeline\r\n    );\r\n\r\n    if (activeAnimation) {\r\n      activeAnimation.effect = new KeyframeEffect(element, keyframes, { composite });\r\n    } else {\r\n      elementAnimations.set(\r\n        element,\r\n        concat(activeAnimations, [\r\n          element.animate(keyframes, {\r\n            timeline,\r\n            composite,\r\n          }),\r\n        ])\r\n      );\r\n    }\r\n  };\r\n\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject | false | null | undefined]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      setStyles(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarStyle(scrollbarStructures, (structure) => {\r\n      const { _handle } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? strWidth : strHeight]: ratioToCssPercent(\r\n            getScrollbarHandleLengthRatio(isHorizontal)\r\n          ),\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const { _scrollCoordinates } = structureSetupState;\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n    const axisScrollTimeline = scrollTimeline[xyKey];\r\n    const axisIsDefaultDirectionScroll =\r\n      isDefaultDirectionScrollCoordinates(_scrollCoordinates)[xyKey];\r\n    const getAxisTransformValue = (scrollbarStructure: ScrollbarStructure, scrollPercent: number) =>\r\n      getTrasformTranslateValue(\r\n        ratioToCssPercent(\r\n          getScrollbarHandleOffsetRatio(\r\n            scrollbarStructure,\r\n            axisIsDefaultDirectionScroll ? scrollPercent : 1 - scrollPercent,\r\n            isHorizontal\r\n          )\r\n        ),\r\n        isHorizontal\r\n      );\r\n\r\n    if (axisScrollTimeline) {\r\n      each(scrollbarStructures, (structure: ScrollbarStructure) => {\r\n        const { _handle } = structure;\r\n        setElementAnimation(\r\n          _handle,\r\n          axisScrollTimeline,\r\n          addDirectionRTLKeyframes({\r\n            transform: [0, 1].map((percent) => getAxisTransformValue(structure, percent)),\r\n          })\r\n        );\r\n      });\r\n    } else {\r\n      scrollbarStyle(scrollbarStructures, (structure) => [\r\n        structure._handle,\r\n        {\r\n          transform: getAxisTransformValue(\r\n            structure,\r\n            getScrollCoordinatesPercent(_scrollCoordinates, getElementScroll(_scrollOffsetElement))[\r\n              xyKey\r\n            ]\r\n          ),\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n  const doRefreshScrollbarOffset = (scrollbar: HTMLElement) =>\r\n    _viewportIsTarget && !_isBody && parent(scrollbar) === _viewport;\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget) {\r\n      const { _overflowAmount, _scrollCoordinates } = structureSetupState;\r\n      const isDefaultDirectionScroll = isDefaultDirectionScrollCoordinates(_scrollCoordinates);\r\n      const cushion = 0.5; // otherwise it sometimes happens that scrolling to 100% will cause the scrollbars to disappear\r\n\r\n      if (scrollTimeline.x && scrollTimeline.y) {\r\n        each(concat(verticalScrollbars, horizontalScrollbars), ({ _scrollbar }) => {\r\n          if (doRefreshScrollbarOffset(_scrollbar)) {\r\n            const setScrollbarElementAnimation = (axis: keyof XY<unknown>) =>\r\n              setElementAnimation(\r\n                _scrollbar,\r\n                scrollTimeline[axis],\r\n                addDirectionRTLKeyframes({\r\n                  transform: [0, isDefaultDirectionScroll[axis] ? 1 : -1].map((percent) =>\r\n                    getTrasformTranslateValue(\r\n                      numberToCssPx(percent * (_overflowAmount[axis] - cushion)),\r\n                      axis === 'x'\r\n                    )\r\n                  ),\r\n                }),\r\n                'add'\r\n              );\r\n\r\n            setScrollbarElementAnimation('x');\r\n            setScrollbarElementAnimation('y');\r\n          } else {\r\n            cancelElementAnimations(_scrollbar);\r\n          }\r\n        });\r\n      } else {\r\n        const scrollPercent = getScrollCoordinatesPercent(\r\n          _scrollCoordinates,\r\n          getElementScroll(_scrollOffsetElement)\r\n        );\r\n        const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n          const { _scrollbar } = structure;\r\n          const elm = doRefreshScrollbarOffset(_scrollbar) && _scrollbar;\r\n          const getTranslateValue = (\r\n            axisScrollPercent: number,\r\n            axisOverflowAmount: number,\r\n            axisIsDefaultCoordinates: boolean\r\n          ) => {\r\n            const px = axisOverflowAmount * axisScrollPercent;\r\n            return numberToCssPx(axisIsDefaultCoordinates ? px : -px);\r\n          };\r\n\r\n          return [\r\n            elm,\r\n            elm && {\r\n              transform: getTrasformTranslateValue({\r\n                x: getTranslateValue(\r\n                  scrollPercent.x,\r\n                  _overflowAmount.x,\r\n                  isDefaultDirectionScroll.x\r\n                ),\r\n                y: getTranslateValue(\r\n                  scrollPercent.y,\r\n                  _overflowAmount.y,\r\n                  isDefaultDirectionScroll.y\r\n                ),\r\n              }),\r\n            },\r\n          ] as [HTMLElement | false, StyleObject | false];\r\n        };\r\n        scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n        scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n      }\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const scrollbar = createDiv(`${classNameScrollbar} ${scrollbarClassName}`);\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    push(isHorizontal ? horizontalScrollbars : verticalScrollbars, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      cancelElementAnimations,\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        scrollbarStructureRefreshHandleOffset,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollTimeline: scrollTimeline.x,\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollTimeline: scrollTimeline.y,\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  getFocusedElement,\r\n  setT,\r\n  hasAttr,\r\n  stopAndPrevent,\r\n  isFunction,\r\n  mathAbs,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarPressed,\r\n} from '~/classnames';\r\nimport type { XY } from '~/support';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  refreshScrollbarStructuresHandleOffset: (\r\n    scrollbarStructure: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => void,\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarHandlePointerInteraction: (event: PointerEvent) => void\r\n): ScrollbarsSetupEvents => {\r\n  return (\r\n    scrollbarStructure,\r\n    scrollbarsAddRemoveClass,\r\n    refreshScrollbarStructuresHandleOffset,\r\n    isHorizontal\r\n  ) => {\r\n    const {\r\n      _host,\r\n      _viewport,\r\n      _viewportIsTarget,\r\n      _scrollOffsetElement,\r\n      _documentElm,\r\n      _viewportAddRemoveClass,\r\n    } = structureSetupElements;\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [scrollSnapScrollTransitionTimeout, clearScrollSnapScrollTransitionTimeout] =\r\n      selfClearTimeout(444);\r\n    const [requestHandleTransitionAnimationFrame, clearHandleTransitionTimeout] =\r\n      selfClearTimeout();\r\n    const refreshHandleOffsetTransition = bind(\r\n      refreshScrollbarStructuresHandleOffset,\r\n      [scrollbarStructure],\r\n      isHorizontal\r\n    );\r\n    const scrollOffsetElementScrollBy = (coordinates: XY<number>) => {\r\n      isFunction(_scrollOffsetElement.scrollBy) &&\r\n        _scrollOffsetElement.scrollBy({\r\n          behavior: 'smooth',\r\n          left: coordinates.x,\r\n          top: coordinates.y,\r\n        });\r\n    };\r\n    const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointercancel lostpointercapture';\r\n      const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY';\r\n      const leftTopKey = isHorizontal ? 'left' : 'top';\r\n      const whKey = isHorizontal ? 'w' : 'h';\r\n      const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = getOffsetSize(_track)[whKey] - getOffsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'] &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        if (continuePointerDown) {\r\n          clearScrollSnapScrollTransitionTimeout();\r\n\r\n          const instantClickScroll = !isDragScroll && pointerDownEvent.shiftKey;\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              getOffsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElementScroll(_scrollOffsetElement)[xyKey],\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(offFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n          const addScrollbarPressedClass = () =>\r\n            _viewportAddRemoveClass(dataValueViewportScrollbarPressed, true);\r\n          const removeScrollbarPressedClass = addScrollbarPressedClass();\r\n\r\n          const offFns = [\r\n            () => {\r\n              const withoutSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n              removeScrollbarPressedClass();\r\n              const withSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n              const snapScrollDiff = {\r\n                x: withSnapScrollOffset.x - withoutSnapScrollOffset.x,\r\n                y: withSnapScrollOffset.y - withoutSnapScrollOffset.y,\r\n              };\r\n\r\n              if (mathAbs(snapScrollDiff.x) > 3 || mathAbs(snapScrollDiff.y) > 3) {\r\n                addScrollbarPressedClass();\r\n                scrollElementTo(_scrollOffsetElement, withoutSnapScrollOffset);\r\n                scrollOffsetElementScrollBy(snapScrollDiff);\r\n                scrollSnapScrollTransitionTimeout(removeScrollbarPressedClass);\r\n              }\r\n            },\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) => {\r\n              const relativeMovement = pointerMoveEvent[clientXYKey] - pointerDownOffset;\r\n\r\n              if (isDragScroll || instantClickScroll) {\r\n                moveHandleRelative(startOffset + relativeMovement);\r\n              }\r\n            }),\r\n          ];\r\n\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n\r\n            animateClickScroll &&\r\n              push(\r\n                offFns,\r\n                animateClickScroll(\r\n                  moveHandleRelative,\r\n                  getHandleOffset,\r\n                  startOffset,\r\n                  handleLength,\r\n                  relativeTrackPointerOffset\r\n                )\r\n              );\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n    const isAffectingTransition = (event: TransitionEvent) =>\r\n      event.propertyName.indexOf(widthHeightKey) > -1;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_handle, 'pointermove pointerleave', scrollbarHandlePointerInteraction),\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      // focus viewport when clicking on a scrollbar (mouse only)\r\n      !_viewportIsTarget &&\r\n        addEventListener(_scrollbar, 'mousedown', () => {\r\n          const focusedElement = getFocusedElement();\r\n          if (\r\n            hasAttr(focusedElement, dataAttributeViewport) ||\r\n            hasAttr(focusedElement, dataAttributeHost) ||\r\n            focusedElement === document.body\r\n          ) {\r\n            setT(() => {\r\n              _viewport.focus({ preventScroll: true });\r\n            }, 25);\r\n          }\r\n        }),\r\n      // propagate wheel events to viewport when mouse is over scrollbar\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            scrollOffsetElementScrollBy({\r\n              x: deltaX,\r\n              y: deltaY,\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      // when the handle has a size transition, update the handle offset each frame for the time of the transition\r\n      addEventListener(_handle, 'transitionstart', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          const animateHandleOffset = () => {\r\n            refreshHandleOffsetTransition();\r\n            requestHandleTransitionAnimationFrame(animateHandleOffset);\r\n          };\r\n          animateHandleOffset();\r\n        }\r\n      }),\r\n      addEventListener(_handle, 'transitionend transitioncancel', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          clearHandleTransitionTimeout();\r\n          refreshHandleOffsetTransition();\r\n        }\r\n      }),\r\n      // solve problem of interaction causing click events\r\n      addEventListener(\r\n        _scrollbar,\r\n        'pointerdown',\r\n        // stopPropagation for stopping event propagation (causing click listeners to be invoked)\r\n        // preventDefault to prevent the pointer to cause any actions (e.g. releasing mouse button over an <a> tag causes an navigation)\r\n        bind(addEventListener, _documentElm, 'click', stopAndPrevent, {\r\n          _once: true,\r\n          _capture: true,\r\n          _passive: false,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      clearScrollSnapScrollTransitionTimeout,\r\n      clearHandleTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n","import {\r\n  bind,\r\n  noop,\r\n  addEventListener,\r\n  push,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  strScroll,\r\n  strVisible,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport type { OverflowBehavior, ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let mouseInHost: boolean | undefined;\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideIsNever: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [autoHideInstantInteractionTimeout, clearAutoHideInstantInteractionTimeout] =\r\n    selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoHideTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(\r\n      options,\r\n      structureSetupElements,\r\n      structureSetupState,\r\n      (event) =>\r\n        isHoverablePointerType(event) &&\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        manageScrollbarsAutoHideInstantInteraction()\r\n    )\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoHideTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n  const manageScrollbarsAutoHideInstantInteraction = () => {\r\n    if (autoHideIsLeave ? !mouseInHost : !autoHideIsNever) {\r\n      manageScrollbarsAutoHide(true);\r\n      autoHideInstantInteractionTimeout(() => {\r\n        manageScrollbarsAutoHide(false);\r\n      });\r\n    }\r\n  };\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      autoHideIsLeave && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n  const destroyFns: (() => void)[] = [\r\n    clearAutoHideTimeout,\r\n    clearAutoHideInstantInteractionTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const {\r\n        _overflowEdgeChanged,\r\n        _overflowAmountChanged,\r\n        _overflowStyleChanged,\r\n        _scrollCoordinatesChanged,\r\n      } = _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const [overflow, overflowChanged] = _checkOption('overflow');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged ||\r\n        _overflowAmountChanged ||\r\n        _scrollCoordinatesChanged ||\r\n        _directionChanged ||\r\n        _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged || overflowChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (\r\n        overflowBehavior: OverflowBehavior,\r\n        overflowStyle: OverflowStyle,\r\n        isHorizontal: boolean\r\n      ) => {\r\n        const isVisible =\r\n          overflowBehavior.includes(strScroll) &&\r\n          (visibility === strVisible || (visibility === 'auto' && overflowStyle === strScroll));\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideIsNever = autoHide === 'never';\r\n        manageScrollbarsAutoHide(autoHideIsNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, clickScroll);\r\n      }\r\n\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(overflow.x, _overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(overflow.y, _overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      if (updateScrollbars) {\r\n        // order is matter! length has to be refreshed before offset\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsScrollbarOffset();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  removeAttrs,\r\n  hasAttrClass,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n  addAttrClass,\r\n  addRemoveAttrClass,\r\n  setAttrs,\r\n  getAttr,\r\n  stopPropagation,\r\n  isBodyElement,\r\n  getFocusedElement,\r\n  wnd,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n  dataAttributeHtmlBody,\r\n  dataValueHostIsHost,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n} from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  _originalScrollOffsetElement: HTMLElement;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _windowElm: () => Window;\r\n  _viewportHasClass: (viewportAttributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) => () => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    host: defaultHostInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isBody = isBodyElement(targetElement);\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const getDocumentWindow = () => ownerDocument.defaultView || wnd;\r\n  const focusElm = (customActiveElm: Element | null) => {\r\n    if (customActiveElm && (customActiveElm as HTMLElement).focus) {\r\n      (customActiveElm as HTMLElement).focus({ preventScroll: true });\r\n    }\r\n  };\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // viewport element has higher priority and content element will not be generated\r\n  // will act the same way as initialization: `{ elements: { viewport, content: false } }`\r\n  const viewportIsContent = !viewportIsTarget && possibleViewportElement === possibleContentElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : possibleViewportElement;\r\n  const nonBodyHostElement = isTextarea\r\n    ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n    : (targetElement as HTMLElement);\r\n  const hostElement = viewportIsTargetBody ? viewportElement : nonBodyHostElement;\r\n  const paddingElement =\r\n    !viewportIsTarget &&\r\n    dynamicInitializationElement(createNewDiv, defaultPaddingInitialization, paddingInitialization);\r\n  const contentElement = !viewportIsContent && possibleContentElement;\r\n  const generatedElements = [contentElement, viewportElement, paddingElement, hostElement].map(\r\n    (elm) => isHTMLElement(elm) && !parent(elm) && elm\r\n  );\r\n  const elementIsGenerated = (elm: HTMLElement | false) => elm && inArray(generatedElements, elm);\r\n  const originalNonBodyScrollOffsetElement = elementIsGenerated(viewportElement)\r\n    ? targetElement\r\n    : viewportElement;\r\n\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding: paddingElement,\r\n    _content: contentElement,\r\n    _scrollOffsetElement: viewportIsTargetBody ? docElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _originalScrollOffsetElement: isBody ? docElement : originalNonBodyScrollOffsetElement,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _windowElm: getDocumentWindow,\r\n    _viewportHasClass: (viewportAttributeClassName: string) =>\r\n      hasAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName),\r\n    _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) =>\r\n      addRemoveAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName, add),\r\n  };\r\n  const { _target, _host, _padding, _viewport, _content } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttrs(_host, [dataAttributeHost, dataAttributeInitialize]);\r\n      removeAttrs(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttrs(docElement, [dataAttributeInitialize, dataAttributeHost]);\r\n      }\r\n    },\r\n  ];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elm && !elementIsGenerated(elm)\r\n        )\r\n      );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    const docWnd = getDocumentWindow();\r\n    const initActiveElm = getFocusedElement();\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n    // wrapping / unwrapping will cause the focused element to blur, this should prevent those events to surface\r\n    const prepareWrapUnwrapFocus = (activeElement?: Element | null) =>\r\n      addEventListener(activeElement, 'focusin focusout focus blur', stopPropagation, {\r\n        _capture: true,\r\n      });\r\n    const tabIndexStr = 'tabindex';\r\n    const ogTabindex = getAttr(_viewport, tabIndexStr);\r\n    const undoInitWrapUndwrapFocus = prepareWrapUnwrapFocus(initActiveElm);\r\n    setAttrs(_host, dataAttributeHost, viewportIsTarget ? '' : dataValueHostIsHost);\r\n    setAttrs(_padding, dataAttributePadding, '');\r\n    setAttrs(_viewport, dataAttributeViewport, '');\r\n    setAttrs(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      setAttrs(_viewport, tabIndexStr, ogTabindex || '-1');\r\n      isBody && setAttrs(docElement, dataAttributeHtmlBody, '');\r\n    }\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, [\r\n      undoInitWrapUndwrapFocus,\r\n      () => {\r\n        const destroyActiveElm = getFocusedElement();\r\n        const undoDestroyWrapUndwrapFocus = prepareWrapUnwrapFocus(destroyActiveElm);\r\n        removeAttrs(_padding, dataAttributePadding);\r\n        removeAttrs(_content, dataAttributeContent);\r\n        removeAttrs(_viewport, dataAttributeViewport);\r\n        isBody && removeAttrs(docElement, dataAttributeHtmlBody);\r\n        ogTabindex\r\n          ? setAttrs(_viewport, tabIndexStr, ogTabindex)\r\n          : removeAttrs(_viewport, tabIndexStr);\r\n\r\n        elementIsGenerated(_content) && unwrap(_content);\r\n        elementIsGenerated(_viewport) && unwrap(_viewport);\r\n        elementIsGenerated(_padding) && unwrap(_padding);\r\n        focusElm(destroyActiveElm);\r\n        undoDestroyWrapUndwrapFocus();\r\n      },\r\n    ]);\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      addAttrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden);\r\n      push(destroyFns, bind(removeAttrs, _viewport, dataAttributeViewport));\r\n    }\r\n\r\n    // focus viewport if previously focused element was target, otherwise focus previously focused element\r\n    focusElm(\r\n      !viewportIsTarget && initActiveElm === targetElement && docWnd.top === docWnd\r\n        ? _viewport\r\n        : initActiveElm\r\n    );\r\n    undoInitWrapUndwrapFocus();\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n","import { setStyles, strHeight } from '~/support';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged = _content && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      setStyles(_content, {\r\n        [strHeight]: _heightIntrinsic && '100%',\r\n      });\r\n    }\r\n  };\r\n","import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  setStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative && `calc(100% + ${paddingHorizontal}px)`,\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      setStyles(_padding || _viewport, paddingStyle);\r\n      setStyles(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  getScrollSize,\r\n  getFractionalSize,\r\n  equalWH,\r\n  getClientSize,\r\n  equalXY,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  getWindowSize,\r\n  addRemoveAttrClass,\r\n  capitalizeFirstLetter,\r\n  setStyles,\r\n  strVisible,\r\n  strHidden,\r\n  each,\r\n  keys,\r\n  strScroll,\r\n  scrollElementTo,\r\n  getElementScroll,\r\n  sanatizeScrollCoordinates,\r\n  getStyles,\r\n  equal,\r\n  getZeroScrollCoordinates,\r\n  hasDimensions,\r\n  addEventListener,\r\n  stopPropagation,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueNoClipping,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataValueViewportOverflowXPrefix,\r\n  dataValueViewportOverflowYPrefix,\r\n  dataValueViewportNoContent,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { ScrollCoordinates, WH, XY } from '~/support';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\nimport type { ViewportOverflowState } from '../structureSetup.utils';\r\nimport {\r\n  createViewportOverflowState,\r\n  getShowNativeOverlaidScrollbars,\r\n  overflowIsVisible,\r\n} from '../structureSetup.utils';\r\n\r\ninterface FlowDirectionStyles {\r\n  display?: string;\r\n  direction?: string;\r\n  flexDirection?: string;\r\n  writingMode?: string;\r\n}\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  structureSetupState\r\n) => {\r\n  const env = getEnvironment();\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportIsTarget,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportAddRemoveClass,\r\n    _windowElm,\r\n  } = structureSetupElements;\r\n  const { _nativeScrollbarsHiding } = env;\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n  const max0 = bind(mathMax, 0);\r\n  const flowDirectionStyleArr = ['display', 'direction', 'flexDirection', 'writingMode'] as const;\r\n\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const partialXYOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: {},\r\n  };\r\n  const getOverflowAmount = (\r\n    viewportScrollSize: WH<number>,\r\n    viewportClientSize: WH<number>\r\n  ): WH<number> => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n  const measureScrollCoordinates = (): ScrollCoordinates => {\r\n    const originalScrollOffset = getElementScroll(_scrollOffsetElement);\r\n    const removeNoContent = _viewportAddRemoveClass(dataValueViewportNoContent, true);\r\n    const removeScrollBlock = addEventListener(_scrollOffsetElement, strScroll, stopPropagation, {\r\n      _capture: true,\r\n    });\r\n\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      x: 0,\r\n      y: 0,\r\n    });\r\n    removeNoContent();\r\n\r\n    const _start = getElementScroll(_scrollOffsetElement);\r\n    const scrollSize = getScrollSize(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      x: scrollSize.w,\r\n      y: scrollSize.h,\r\n    });\r\n\r\n    const tmp = getElementScroll(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      // if tmp is very close start there porbably wasn't any scroll happening so scroll again in different direction\r\n      x: tmp.x - _start.x < 1 && -scrollSize.w,\r\n      y: tmp.y - _start.y < 1 && -scrollSize.h,\r\n    });\r\n\r\n    const _end = getElementScroll(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, originalScrollOffset);\r\n    removeScrollBlock();\r\n\r\n    return {\r\n      _start,\r\n      _end,\r\n    };\r\n  };\r\n  const getFlowDirectionStyles = () =>\r\n    assignDeep({}, hasDimensions(_viewport) ? getStyles(_viewport, flowDirectionStyleArr) : {});\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(getFractionalSize, _viewport)\r\n  );\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(getScrollSize, _viewport));\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n  const [updateHasOverflowCache] = createCache<Partial<XY<boolean>>>(partialXYOptions);\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n  const [updateOverflowStyleCache] = createCache<Partial<XY<OverflowStyle>>>(partialXYOptions);\r\n  const [updateFlowDirectionStyles] = createCache<FlowDirectionStyles>({\r\n    _equal: (currVal, newValu) => equal(currVal, newValu, flowDirectionStyleArr),\r\n    _initialValue: {},\r\n  });\r\n  const [updateMeasuredScrollCoordinates, getCurrentMeasuredScrollCoordinates] =\r\n    createCache<ScrollCoordinates>({\r\n      _equal: (currVal, newVal) =>\r\n        equalXY(currVal._start, newVal._start) && equalXY(currVal._end, newVal._end),\r\n      _initialValue: getZeroScrollCoordinates(),\r\n    });\r\n\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const createViewportOverflowStyleClassName = (\r\n    overflowStyle: OverflowStyle,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const prefix = isHorizontal\r\n      ? dataValueViewportOverflowXPrefix\r\n      : dataValueViewportOverflowYPrefix;\r\n    return `${prefix}${capitalizeFirstLetter(overflowStyle)}`;\r\n  };\r\n\r\n  const setViewportOverflow = (viewportOverflowState: ViewportOverflowState) => {\r\n    const { _overflowStyle } = viewportOverflowState;\r\n\r\n    each(keys(_overflowStyle) as Array<keyof typeof _overflowStyle>, (axis) => {\r\n      const isHorizontal = axis === 'x';\r\n      const allOverflowStyleClassNames = (\r\n        [strVisible, strHidden, strScroll] as OverflowStyle[]\r\n      ).map((style) => createViewportOverflowStyleClassName(style, isHorizontal));\r\n      _viewportAddRemoveClass(allOverflowStyleClassNames.join(' '));\r\n      _viewportAddRemoveClass(\r\n        createViewportOverflowStyleClassName(_overflowStyle[axis], isHorizontal),\r\n        true\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const { _sizeChanged, _contentMutation, _directionChanged, _appear, _scrollbarSizeChanged } =\r\n      _observersUpdateHints || {};\r\n    const scrollbarsHidingPluginViewportArrangement =\r\n      scrollbarsHidingPlugin &&\r\n      scrollbarsHidingPlugin._viewportArrangement(\r\n        structureSetupElements,\r\n        structureSetupState,\r\n        _observersState,\r\n        env,\r\n        _checkOption\r\n      );\r\n\r\n    const { _arrangeViewport, _undoViewportArrange, _hideNativeScrollbars } =\r\n      scrollbarsHidingPluginViewportArrangement || {};\r\n\r\n    const [showNativeOverlaidScrollbars, showNativeOverlaidScrollbarsChanged] =\r\n      getShowNativeOverlaidScrollbars(_checkOption, env);\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n\r\n    const viewportChanged =\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(dataValueViewportScrollbarHidden, !showNativeOverlaidScrollbars);\r\n    }\r\n\r\n    if (viewportChanged) {\r\n      const [redoViewportArrange] = _undoViewportArrange ? _undoViewportArrange() : [];\r\n\r\n      const [sizeFraction] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = getClientSize(_viewport);\r\n      const arrangedViewportScrollSize = viewportScrollSize;\r\n      const arrangedViewportClientSize = viewportClientSize;\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      const windowInnerSize = getWindowSize(_windowElm());\r\n      const overflowAmountScrollSize = {\r\n        w: max0(mathMax(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\r\n        h: max0(mathMax(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.w\r\n            : arrangedViewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.h\r\n            : arrangedViewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const [hasOverflow, hasOverflowChanged] = updateHasOverflowCache({\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    });\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      viewportChanged;\r\n    const viewportOverflowState = createViewportOverflowState(hasOverflow, overflow);\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      viewportOverflowState._overflowStyle\r\n    );\r\n    const [, flowDirectionStylesChanged] = updateFlowDirectionStyles(\r\n      getFlowDirectionStyles(),\r\n      _force\r\n    );\r\n\r\n    const adjustMeasuredScrollCoordinates =\r\n      _directionChanged || _appear || flowDirectionStylesChanged || hasOverflowChanged || _force;\r\n    const [scrollCoordinates, scrollCoordinatesChanged] = adjustMeasuredScrollCoordinates\r\n      ? updateMeasuredScrollCoordinates(measureScrollCoordinates(), _force)\r\n      : getCurrentMeasuredScrollCoordinates();\r\n\r\n    if (adjustViewportStyle) {\r\n      setViewportOverflow(viewportOverflowState);\r\n\r\n      if (_hideNativeScrollbars && _arrangeViewport) {\r\n        setStyles(\r\n          _viewport,\r\n          _hideNativeScrollbars(\r\n            viewportOverflowState,\r\n            _observersState,\r\n            _arrangeViewport(viewportOverflowState, viewportScrollSize, sizeFraction)\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    addRemoveAttrClass(_host, dataAttributeHost, dataValueNoClipping, removeClipping);\r\n    addRemoveAttrClass(_padding, dataAttributePadding, dataValueNoClipping, removeClipping);\r\n\r\n    assignDeep(structureSetupState, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n      _scrollCoordinates: sanatizeScrollCoordinates(scrollCoordinates, overflowAmount),\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n      _scrollCoordinatesChanged: scrollCoordinatesChanged || overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n","import { getEnvironment } from '~/environment';\r\nimport {\r\n  assignDeep,\r\n  each,\r\n  getElementScroll,\r\n  getZeroScrollCoordinates,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport { dataValueViewportMeasuring } from '~/classnames';\r\nimport type { ScrollCoordinates } from '~/support';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _scrollCoordinates: ScrollCoordinates;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n  _scrollCoordinatesChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n    _scrollCoordinates: getZeroScrollCoordinates(),\r\n  };\r\n  const { _target, _scrollOffsetElement, _viewportIsTarget, _viewportAddRemoveClass } = elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange;\r\n      const revertMeasuring = _viewportAddRemoveClass(dataValueViewportMeasuring, true);\r\n      const scrollOffset = adjustScrollOffset && getElementScroll(_scrollOffsetElement);\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n      revertMeasuring();\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  bind,\r\n  getElementScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport { dataValueViewportMeasuring } from '~/classnames';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  const getCurrentOption = createOptionCheck(options, {});\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    getCurrentOption,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _originalScrollOffsetElement, _scrollOffsetElement, _viewportAddRemoveClass } =\r\n        structureSetupElements;\r\n      const revertMeasuring = _viewportAddRemoveClass(dataValueViewportMeasuring, true);\r\n      const initialScroll = getElementScroll(_originalScrollOffsetElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n\r\n      scrollElementTo(_scrollOffsetElement, initialScroll);\r\n      revertMeasuring();\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { Initialization, InitializationTarget, PartialInitialization } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** The scroll coordinates of the viewport. */\r\n  scrollCoordinates: {\r\n    /** The start (origin) scroll coordinates for each axis. */\r\n    start: XY<number>;\r\n    /** The end scroll coordinates for each axis. */\r\n    end: XY<number>;\r\n  };\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const {\r\n            _overflowEdgeChanged,\r\n            _overflowAmountChanged,\r\n            _overflowStyleChanged,\r\n            _scrollCoordinatesChanged,\r\n          } = _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                scrollCoordinatesChanged: !!_scrollCoordinatesChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n          _scrollCoordinates,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            scrollCoordinates: {\r\n              start: _scrollCoordinates._start,\r\n              end: _scrollCoordinates._end,\r\n            },\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update(true);\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],"names":["createCache","options","update","o","_initialValue","i","_equal","u","_alwaysUpdateValues","_value","_previous","cacheUpdateContextual","newValue","force","curr","newVal","changed","cacheUpdateIsolated","getCurrentCache","isBrowser","window","document","wnd","mathMax","Math","max","mathMin","min","mathRound","round","mathAbs","abs","mathSign","sign","cAF","cancelAnimationFrame","rAF","requestAnimationFrame","setT","setTimeout","clearT","clearTimeout","getApi","name","undefined","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","scrollT","ElementNodeType","Node","ELEMENT_NODE","toString","hasOwnProperty","Object","prototype","typeRgx","isUndefined","obj","isNull","type","call","replace","toLowerCase","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","lengthCorrectFormat","isPlainObject","key","cstr","ctor","ctorProto","hasOwnConstructor","hasIsPrototypeOf","isHTMLElement","instanceofObj","HTMLElement","nodeType","isElement","Element","animationCurrentTime","performance","now","animateNumber","from","to","duration","onFrame","easing","animationFrameId","timeStart","finalDuration","frame","complete","timeNow","timeElapsed","stopAnimation","percent","progress","animationCompleted","each","source","callback","keys","inArray","arr","item","indexOf","concat","a","b","push","array","items","arrayIsSingleItem","apply","createOrKeepArray","value","isEmptyArray","deduplicateArray","Set","runEachAndClear","args","keep","runFn","fn","strPaddingTop","strPaddingRight","strPaddingLeft","strPaddingBottom","strMarginLeft","strMarginRight","strMarginBottom","strOverflowX","strOverflowY","strWidth","strHeight","strVisible","strHidden","strScroll","capitalizeFirstLetter","str","finalStr","String","toUpperCase","slice","equal","props","propMutation","result","prop","compareA","compareB","equalWH","equalXY","equalTRBL","noop","bind","selfClearTimeout","timeout","id","setTFn","clearTFn","debounce","functionToDebounce","maxTimeoutId","prevArguments","latestArguments","clear","_","_timeout","p","_maxDelay","v","_mergeParams","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","arguments","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","clearTimeoutFn","mergeParamsResult","invokedArgs","boundInvoke","timeoutId","_flush","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","copy","copyIsArray","src","clone","removeUndefinedProperties","deep","isEmptyObject","capNumber","number","getDomTokensArray","tokens","split","filter","token","getAttr","elm","attrName","getAttribute","hasAttr","hasAttribute","setAttrs","attrNames","setAttribute","removeAttrs","removeAttribute","domTokenListAttr","initialArr","setElmAttr","domTokenListOperation","operationTokens","operation","initialArrSet","join","_remove","removeTokens","_add","addTokens","_has","hasTokens","tokenSet","reduce","boolean","includes","removeAttrClass","addAttrClass","addRemoveAttrClass","add","hasAttrClass","createDomTokenListClass","removeClass","className","addClass","find","selector","rootElm","querySelectorAll","findFirst","querySelector","is","matches","isBodyElement","contents","childNodes","parent","parentElement","closest","getFocusedElement","doc","activeElement","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","deepBoundaryIsValid","removeElements","nodes","e","parentElm","removeChild","before","preferredAnchor","insertedElms","anchor","fragment","createDocumentFragment","insertedElm","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","node","children","insertAfter","insertedNodes","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","trim","customCssPropRegex","getCSSVal","computedStyle","getPropertyValue","validFiniteNumber","notNaN","isFinite","parseToZeroOrNumber","parseFloat","ratioToCssPercent","ratio","toFixed","numberToCssPx","setStyles","styles","rawValue","elmStyle","style","test","setProperty","_unused","getStyles","pseudoElm","getSingleStyle","getStylesResult","getComputedStyle","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","getTrasformTranslateValue","isHorizontal","x","y","elementHasDimensions","offsetWidth","offsetHeight","getClientRects","zeroObj","w","h","getElmWidthHeightProperty","property","getWindowSize","customWnd","getOffsetSize","getClientSize","getScrollSize","getFractionalSize","cssWidth","cssHeight","getBoundingClientRect","hasDimensions","domRectHasDimensions","rect","domRectAppeared","currContentRect","prevContentRect","rectHasDimensions","rectHadDimensions","removeEventListener","eventNames","listener","capture","eventName","addEventListener","_ref","passive","_passive","_capture","once","_once","nativeOptions","map","finalListener","evt","stopPropagation","preventDefault","stopAndPrevent","scrollElementTo","position","scrollLeft","scrollTop","getElementScroll","getZeroScrollCoordinates","_start","_end","sanatizeScrollCoordinates","rawScrollCoordinates","overflowAmount","I","T","sanitizeAxis","start","end","amount","newStart","newEnd","startAbs","endAbs","startX","endX","startY","endY","isDefaultDirectionScrollCoordinates","getAxis","getScrollCoordinatesPercent","currentScroll","current","manageListener","createEventListenerHub","initialEventListeners","events","Map","removeEvent","eventSet","get","currListener","forEach","addEvent","nameOrEventListeners","listenerOrPure","set","eventListenerKeys","offFns","eventListener","triggerEvent","event","opsStringify","JSON","stringify","val","getPropByPath","path","defaultOptions","paddingAbsolute","showNativeOverlaidScrollbars","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","autoHideSuspend","dragScroll","clickScroll","pointers","getOptionsDiff","currOptions","newOptions","diff","optionsKeys","optionKey","currOptionValue","newOptionValue","isDiff","createOptionCheck","changedOptions","dataAttributePrefix","classNameEnvironment","classNameEnvironmentScrollbarHidden","dataAttributeInitialize","dataValueNoClipping","dataAttributeHtmlBody","dataAttributeHost","dataValueHostIsHost","dataAttributeViewport","dataValueViewportOverflowXPrefix","dataValueViewportOverflowYPrefix","dataValueViewportArrange","dataValueViewportMeasuring","dataValueViewportScrollbarHidden","dataValueViewportScrollbarPressed","dataValueViewportNoContent","dataAttributePadding","dataAttributeContent","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerScroll","classNameSizeObserverListenerItem","classNameSizeObserverListenerItemFinal","classNameTrinsicObserver","classNameScrollbarThemeNone","classNameScrollbar","classNameScrollbarRtl","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","classNameScrollbarVisible","classNameScrollbarCornerless","classNameScrollbarInteraction","classNameScrollbarUnusable","classNameScrollbarAutoHide","classNameScrollbarAutoHideHidden","classNameScrollbarWheel","classNameScrollbarTrackInteractive","classNameScrollbarHandleInteractive","environmentInstance","createEnvironment","getNativeScrollbarSize","measureElm","measureElmChild","body","cSize","oSize","fSize","getNativeScrollbarsHiding","testElm","revertClass","envStyle","envDOM","envElm","envChildElm","updateNativeScrollbarSizeCache","getNativeScrollbarSizeCache","nativeScrollbarsSize","nativeScrollbarsHiding","nativeScrollbarsOverlaid","staticDefaultInitialization","elements","host","padding","viewport","content","slot","cancel","staticDefaultOptions","getDefaultOptions","getDefaultInitialization","env","_nativeScrollbarsSize","_nativeScrollbarsOverlaid","_nativeScrollbarsHiding","_scrollTimeline","_addResizeListener","_getDefaultInitialization","_setDefaultInitialization","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_staticDefaultInitialization","_staticDefaultOptions","matchMedia","addZoomListener","onZoom","media","devicePixelRatio","updatedNativeScrollbarSize","nativeScrollbarSizeChanged","getEnvironment","resolveInitialization","staticInitializationElement","fallbackStaticInitializationElement","defaultStaticInitializationElement","staticInitializationElementValue","staticInitialization","resolvedInitialization","dynamicInitializationElement","fallbackDynamicInitializationElement","defaultDynamicInitializationElement","dynamicInitializationElementValue","dynamicInitialization","cancelInitialization","isBody","cancelInitializationValue","k","M","L","defaultNativeScrollbarsOverlaid","defaultbody","resolvedNativeScrollbarsOverlaid","resolvedDocumentScrollingElement","finalNativeScrollbarsOverlaid","finalDocumentScrollingElement","targetInstanceMap","WeakMap","addInstance","osInstance","removeInstance","delete","getInstance","createEventContentChange","eventContentChange","destroyed","destroy","updateElements","getElements","eventElmList","entries","isTargetChild","contains","removeListener","createDOMObserver","isContentObserver","isConnected","F","_attributes","B","_styleChangingAttributes","X","_eventContentChange","Y","_nestedTargetSelector","W","_ignoreTargetChange","G","_ignoreContentChange","debouncedEventContentChange","destroyEventContentChange","updateEventContentChangeElements","finalAttributes","finalStyleChangingAttributes","observedAttributes","observerCallback","fromRecords","mutations","ignoreTargetChange","ignoreContentChange","totalChangedNodes","targetChangedAttrs","targetStyleChanged","contentChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","removedNodes","isAttributesType","isChildListType","targetIsMutationTarget","isAttrChange","attributeValue","attributeChanged","styleChangingAttrChanged","contentAttrChanged","isNestedTarget","baseAssertion","contentFinalChanged","mutationObserver","observe","attributeOldValue","attributeFilter","subtree","childList","characterData","disconnect","takeRecords","pluginModules","staticPluginModuleInstances","addPlugins","addedPlugin","plugin","registerPluginModuleInstances","staticObj","instanceInfo","static","osStatic","instance","instanceObj","instancePluginMap","getStaticPluginModuleInstance","pluginModuleName","optionsValidationPluginModuleName","sizeObserverPluginName","SizeObserverPlugin","listenerElement","onSizeChangedCallback","observeAppearChange","scrollAmount","scrollEventName","observerElementChildren","observerElementChildrenRoot","shrinkElement","lastChild","expandElement","expandElementChild","cacheSize","currSize","isDirty","rAFId","reset","onResized","appear","onScroll","scrollEvent","destroyFns","getShowNativeOverlaidScrollbars","checkOption","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","overflowIsVisible","overflowBehavior","createViewportOverflowState","hasOverflow","getAxisOverflowStyle","axisBehavior","axisHasOverflow","perpendicularBehavior","perpendicularOverflow","behaviorStyle","axisOverflowVisible","perpendicularOverflowVisible","nonPerpendicularOverflow","nonOverflow","_overflowStyle","_overflowScroll","scrollbarsHidingPluginName","ScrollbarsHidingPlugin","_viewportArrangement","structureSetupElements","structureSetupState","observersSetupState","checkOptions","tt","_viewportIsTarget","nt","_viewport","D","doViewportArrange","readViewportOverflowState","getStatePerAxis","styleKey","overflowStyle","overflowScroll","xOverflowStyle","xOverflowScroll","yOverflowStyle","yOverflowScroll","_getViewportOverflowHideOffset","viewportOverflowState","K","arrangeHideOffset","getHideOffsetPerAxis","isOverlaid","nativeScrollbarSize","nonScrollbarStylingHideOffset","scrollbarsHideOffset","scrollbarsHideOffsetArrange","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","_scrollbarsHideOffset","_scrollbarsHideOffsetArrange","_hideNativeScrollbars","_directionIsRTL","viewportArrange","viewportStyleObj","ot","st","arrangeX","arrangeY","hideOffsetX","hideOffsetY","ct","_viewportPaddingStyle","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","_arrangeViewport","viewportScrollSize","sizeFraction","et","viewportArrangeHorizontalPaddingKey","viewportArrangeHorizontalPaddingValue","viewportArrangeVerticalPaddingValue","paddingTop","fractionalContentWidth","fractionalContenHeight","arrangeSize","_undoViewportArrange","finalViewportOverflowState","viewportPaddingStyle","finalPaddingStyle","assignProps","prevStyle","addArrange","clickScrollPluginModuleName","ClickScrollPlugin","moveHandleRelative","getHandleOffset","startOffset","handleLength","relativeTrackPointerOffset","iteration","animateClickScroll","clickScrollProgress","animationProgress","handleStartBound","handleEndBound","mouseBetweenHandleBounds","firstIterationPauseTimeout","createSizeObserver","_appear","sizeObserverPlugin","updateResizeObserverContentRectCache","baseElements","sizeObserver","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","ResizeObserverEntry","skip","currRContentRect","contentRect","_sizeChanged","resizeObserverInstance","pop","pluginAppearCallback","pluginDestroyFns","createTrinsicObserver","onTrinsicChangedCallback","intersectionObserverInstance","isHeightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","heightIntrinsic","heightIntrinsicChanged","intersectionObserverCallback","root","onSizeChanged","newSize","createObserversSetup","getCurrentOption","onObserversUpdated","debounceTimeout","debounceMaxDelay","updateContentMutationObserver","destroyContentMutationObserver","prevDirectionIsRTL","hostSelector","viewportSelector","viewportAttrsFromTarget","baseStyleChangingAttrsTextarea","baseStyleChangingAttrs","ft","_target","vt","_host","ht","_scrollOffsetElement","gt","_content","bt","_isTextarea","wt","_viewportHasClass","yt","_viewportAddRemoveClass","getDirectionIsRTL","state","_heightIntrinsic","scrollbarsHidingPlugin","updateContentSizeCache","isArranged","scrollOffset","revertMeasuring","redoViewportArrange","contentScroll","viewportScroll","fractional","contentMutationObserverAttr","onObserversUpdatedDebounced","prev","prevObj","currObj","setDirection","updateHints","newDirectionIsRTL","_directionChanged","updateViewportAttrsFromHost","attribute","hostAttr","onTrinsicChanged","heightIntrinsicCache","_heightIntrinsicChanged","exclusiveSizeChange","updateFn","onContentMutation","contentChangedThroughEvent","_contentMutation","onHostMutation","_hostMutation","V","constructTrinsicObserver","updateTrinsicObserver","constructSizeObserver","constructHostMutationObserver","updateHostMutationObserver","viewportIsTargetResizeObserver","destroySizeObserver","destroyTrinsicObserver","destroyHostMutationObserver","removeResizeListener","_scrollbarSizeChanged","_checkOption","_takeRecords","_force","attributesChanged","elementEventsChanged","debounceValue","debounceChanged","contentMutationObserverChanged","ignoreMutationFromOptions","construct","ignore","maxWait","hostUpdateResult","trinsicUpdateResult","contentUpdateResult","createScrollbarsSetupElements","scrollbarsSetupEvents","defaultInitScrollbars","defaultInitScrollbarsSlot","It","_targetIsElm","Tt","_isBody","scrollbarsInit","initScrollbarsSlot","elementAnimations","initScrollTimeline","axis","scrollTimeline","evaluatedScrollbarSlot","generalDynamicInitializationElement","getScrollbarHandleLengthRatio","scrollbarStructure","Dt","_track","kt","_handle","handleSize","trackSize","Mt","_overflowAmount","Rt","_overflowEdge","viewportSize","getScrollbarHandleOffsetRatio","scrollPercent","lengthRatio","addDirectionRTLKeyframes","keyframes","cancelElementAnimations","currAnimations","element","doCancel","animation","setElementAnimation","timeline","composite","activeAnimations","activeAnimation","effect","KeyframeEffect","animate","scrollbarStructureAddRemoveClass","scrollbarStructures","action","_scrollbar","scrollbarStyle","scrollbarStructureRefreshHandleLength","structure","scrollbarStructureRefreshHandleOffset","Lt","_scrollCoordinates","xyKey","axisScrollTimeline","axisIsDefaultDirectionScroll","getAxisTransformValue","transform","doRefreshScrollbarOffset","scrollbar","horizontalScrollbars","verticalScrollbars","scrollbarsAddRemoveClass","onlyHorizontal","singleAxis","runHorizontal","runVertical","refreshScrollbarsHandleLength","refreshScrollbarsHandleOffset","refreshScrollbarsScrollbarOffset","isDefaultDirectionScroll","cushion","setScrollbarElementAnimation","styleScrollbarPosition","Vt","getTranslateValue","axisScrollPercent","axisOverflowAmount","axisIsDefaultCoordinates","px","generateScrollbarDOM","scrollbarClassName","track","handle","generateHorizontalScrollbarStructure","generateVerticalScrollbarStructure","appendElements","_refreshScrollbarsHandleLength","_refreshScrollbarsHandleOffset","_refreshScrollbarsScrollbarOffset","_scrollbarsAddRemoveClass","_horizontal","_scrollbarStructures","_clone","_style","_vertical","createScrollbarsSetupEvents","scrollbarHandlePointerInteraction","refreshScrollbarStructuresHandleOffset","Wt","_documentElm","wheelTimeout","clearWheelTimeout","scrollSnapScrollTransitionTimeout","clearScrollSnapScrollTransitionTimeout","requestHandleTransitionAnimationFrame","clearHandleTransitionTimeout","refreshHandleOffsetTransition","scrollOffsetElementScrollBy","coordinates","scrollBy","behavior","widthHeightKey","createInteractiveScrollEvents","releasePointerCaptureEvents","clientXYKey","leftTopKey","whKey","createRelativeHandleMove","mouseDownScroll","invertedScale","deltaMovement","handleTrackDiff","scrollDeltaPercent","scrollDelta","pointerDownEvent","isDragScroll","pointerCaptureElement","scrollbarOptions","button","isPrimary","pointerType","continuePointerDown","instantClickScroll","shiftKey","getHandleRect","getTrackRect","handleRect","trackRect","axisScale","pointerDownOffset","handleCenter","releasePointerCapture","pointerUpEvent","pointerId","addScrollbarPressedClass","removeScrollbarPressedClass","withoutSnapScrollOffset","withSnapScrollOffset","snapScrollDiff","pointerMoveEvent","relativeMovement","setPointerCapture","wheelScrollBy","isAffectingTransition","propertyName","focusedElement","focus","preventScroll","wheelEvent","deltaX","deltaY","deltaMode","animateHandleOffset","createScrollbarsSetup","mouseInHost","autoHideIsMove","autoHideIsLeave","autoHideIsNever","prevTheme","instanceAutoHideSuspendScrollDestroyFn","instanceAutoHideDelay","isHoverablePointerType","requestScrollAnimationFrame","cancelScrollAnimationFrame","autoHideInstantInteractionTimeout","clearAutoHideInstantInteractionTimeout","autoHideSuspendTimeout","clearAutoHideSuspendTimeout","auotHideTimeout","clearAutoHideTimeout","manageScrollbarsAutoHideInstantInteraction","Gt","_scrollEventElement","jt","Pt","Ut","Nt","manageScrollbarsAutoHide","removeAutoHide","delayless","hide","manageAutoHideSuspension","onHostMouseEnter","_observersUpdateHints","_structureUpdateHints","Qt","_overflowEdgeChanged","Zt","_overflowAmountChanged","tn","_overflowStyleChanged","nn","_scrollCoordinatesChanged","Ot","dt","J","sn","_hasOverflow","themeChanged","visibilityChanged","autoHideChanged","autoHideSuspendChanged","dragScrollChanged","clickScrollChanged","overflowChanged","trulyAppeared","updateScrollbars","updateVisibility","setScrollbarVisibility","isVisible","xVisible","yVisible","hasCorner","createStructureSetupElements","defaultInitElements","defaultHostInitialization","defaultPaddingInitialization","defaultViewportInitialization","defaultContentInitialization","targetIsElm","targetStructureInitialization","initElements","hostInitialization","paddingInitialization","viewportInitialization","contentInitialization","targetElement","isTextarea","ownerDocument","docElement","documentElement","getDocumentWindow","defaultView","focusElm","customActiveElm","generalStaticInitializationElement","createNewDiv","generateViewportElement","generateContentElement","possibleViewportElement","viewportIsTarget","viewportIsTargetBody","possibleContentElement","viewportIsContent","viewportElement","nonBodyHostElement","hostElement","paddingElement","contentElement","generatedElements","elementIsGenerated","originalNonBodyScrollOffsetElement","evaluatedTargetObj","_padding","_originalScrollOffsetElement","_windowElm","viewportAttributeClassName","en","isTextareaHostGenerated","targetContents","contentSlot","docWnd","initActiveElm","unwrap","prepareWrapUnwrapFocus","tabIndexStr","ogTabindex","undoInitWrapUndwrapFocus","destroyActiveElm","undoDestroyWrapUndwrapFocus","createTrinsicUpdateSegment","_observersState","$t","St","createPaddingUpdateSegment","updatePaddingCache","currentPaddingCache","paddingChanged","_t","Ct","paddingAbsoluteChanged","contentMutation","paddingStyleChanged","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","viewportStyle","_paddingAbsolute","_paddingStyleChanged","createOverflowUpdateSegment","rn","max0","flowDirectionStyleArr","whCacheOptions","partialXYOptions","getOverflowAmount","viewportClientSize","tollerance","measureScrollCoordinates","originalScrollOffset","removeNoContent","removeScrollBlock","scrollSize","tmp","getFlowDirectionStyles","updateSizeFraction","getCurrentSizeFraction","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","updateOverflowAmountCache","getCurrentOverflowAmountCache","updateHasOverflowCache","updateOverflowEdge","getCurrentOverflowEdgeCache","updateOverflowStyleCache","updateFlowDirectionStyles","currVal","newValu","updateMeasuredScrollCoordinates","getCurrentMeasuredScrollCoordinates","createViewportOverflowStyleClassName","prefix","setViewportOverflow","allOverflowStyleClassNames","Ht","scrollbarsHidingPluginViewportArrangement","lt","it","ut","overflowXVisible","overflowYVisible","viewportChanged","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","overflowEdgeCache","arrangedViewportScrollSize","arrangedViewportClientSize","windowInnerSize","overflowAmountScrollSize","overflowAmountClientSize","overflowEdge","overflowEdgeChanged","overflowAmountChanged","viewportScrollSizeChanged","sizeFractionChanged","hasOverflowChanged","removeClipping","adjustViewportStyle","overflowStyleChanged","flowDirectionStylesChanged","adjustMeasuredScrollCoordinates","scrollCoordinates","scrollCoordinatesChanged","createStructureSetup","appendStructureElements","canceled","updateSegments","updateInfo","adjustScrollOffset","updateSegment","createSetups","onUpdated","structureSetupCreate","structureSetupUpdate","structureSetupCanceled","observersSetupCreate","observersSetupUpdate","observersUpdateHints","scrollbarsSetupCreate","scrollbarsSetupUpdate","scrollbarsSetupElements","updateHintsAreTruthy","hints","some","observerUpdateHints","_changedOptions","rawChangedOptions","rawForce","zt","_n","_cloneScrollbar","baseUpdateInfoObj","observersHints","structureHints","truthyObserversHints","truthyStructureHints","cn","initialScroll","_observersSetupState","_structureSetupState","_structureSetupElements","_scrollbarsSetupElements","OverlayScrollbars","eventListeners","U","targetIsElement","instanceTarget","potentialInstance","instancePluginModuleInstances","validateOptions","newOptionsWithoutUndefined","pluginValidate","currentOptions","addPluginEvent","removePluginEvents","triggerPluginEvent","addInstanceEvent","removeInstanceEvents","triggerInstanceEvent","setupsConstruct","setupsUpdate","setupsState","setupsElements","setupsCanceled","xt","sizeChanged","directionChanged","hostMutation","pure","base","on","off","pn","an","directionRTL","qt","Yt","translateScrollbarStructure","translateScrollbarsSetupElement","scrollbarsSetupElement","Ft","Bt","translatedStructure","scrollOffsetElement","scrollEventElement","scrollbarHorizontal","scrollbarVertical","plugins","isArr","pluginsToAdd","valid","hasElmsFn","R","j","q","P","N","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","setDefaultInitialization","setDefaultOptions"],"mappings":"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"}