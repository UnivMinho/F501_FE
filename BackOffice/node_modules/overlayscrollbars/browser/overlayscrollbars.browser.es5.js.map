{"version":3,"file":"overlayscrollbars.browser.es5.js","sources":["../../src/support/cache.ts","../../src/support/compatibility/isBrowser.ts","../../src/support/utils/alias.ts","../../src/support/compatibility/apis.ts","../../src/support/utils/types.ts","../../src/support/utils/animation.ts","../../src/support/utils/array.ts","../../src/support/utils/strings.ts","../../src/support/utils/equal.ts","../../src/support/utils/noop.ts","../../src/support/utils/function.ts","../../src/support/utils/object.ts","../../src/support/utils/math.ts","../../src/support/dom/attribute.ts","../../src/support/dom/class.ts","../../src/support/dom/traversal.ts","../../src/support/dom/manipulation.ts","../../src/support/dom/create.ts","../../src/support/dom/style.ts","../../src/support/dom/dimensions.ts","../../src/support/dom/events.ts","../../src/support/dom/scroll.ts","../../src/support/eventListeners.ts","../../src/options.ts","../../src/classnames.ts","../../src/environment.ts","../../src/initialization.ts","../../src/instances.ts","../../src/observers/domObserver.ts","../../src/plugins/plugins.ts","../../../../node_modules/@babel/runtime/helpers/extends.js","../../src/plugins/optionsValidationPlugin/validation.ts","../../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../../src/setups/structureSetup/structureSetup.utils.ts","../../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../../src/plugins/clickScrollPlugin/clickScrollPlugin.ts","../../src/observers/sizeObserver.ts","../../src/observers/trinsicObserver.ts","../../src/setups/observersSetup/observersSetup.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../../src/setups/structureSetup/structureSetup.elements.ts","../../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../../src/setups/structureSetup/structureSetup.ts","../../src/setups/setups.ts","../../src/overlayscrollbars.ts"],"sourcesContent":["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","export const isBrowser =\r\n  typeof window !== 'undefined' &&\r\n  // deno has the global `window` defined, so additionally check for document\r\n  typeof document !== 'undefined';\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const mathSign = Math.sign;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n","import { wnd } from '../utils/alias';\r\n\r\nconst getApi = <T>(name: string) =>\r\n  (typeof wnd[name as keyof typeof wnd] !== 'undefined'\r\n    ? wnd[name as keyof typeof wnd]\r\n    : undefined) as T;\r\n\r\nexport const MutationObserverConstructor = getApi<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  getApi<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = getApi<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = getApi<new (constructor: unknown) => AnimationTimeline>('ScrollTimeline');\r\n","import type { PlainObject } from '~/typings';\r\nimport { isBrowser } from '../compatibility/isBrowser';\r\n\r\nconst ElementNodeType = isBrowser && Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\nconst typeRgx = /^\\[object (.+)\\]$/;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString.call(obj).replace(typeRgx, '$1').toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n","import { mathMax, rAF, cAF } from './alias';\r\nimport { isFunction } from './types';\r\n\r\n/**\r\n * percent: current percent (0 - 1),\r\n * time: current time (duration * percent),\r\n * min: start value\r\n * max: end value\r\n * duration: duration in ms\r\n */\r\nexport type EasingFn = (\r\n  percent: number,\r\n  time: number,\r\n  min: number,\r\n  max: number,\r\n  duration: number\r\n) => number;\r\n\r\nconst animationCurrentTime = () => performance.now();\r\n\r\nexport const animateNumber = (\r\n  from: number,\r\n  to: number,\r\n  duration: number,\r\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\r\n  easing?: EasingFn | false\r\n): ((complete?: boolean) => void) => {\r\n  let animationFrameId = 0;\r\n  const timeStart = animationCurrentTime();\r\n  const finalDuration = mathMax(0, duration);\r\n  const frame = (complete?: boolean) => {\r\n    const timeNow = animationCurrentTime();\r\n    const timeElapsed = timeNow - timeStart;\r\n    const stopAnimation = timeElapsed >= finalDuration;\r\n    const percent = complete\r\n      ? 1\r\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\r\n    const progress =\r\n      (to - from) *\r\n        (isFunction(easing)\r\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\r\n          : percent) +\r\n      from;\r\n    const animationCompleted = stopAnimation || percent === 1;\r\n\r\n    onFrame && onFrame(progress, percent, animationCompleted);\r\n\r\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\r\n  };\r\n  frame();\r\n  return (complete) => {\r\n    cAF!(animationFrameId);\r\n    complete && frame(complete);\r\n  };\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | false | null | undefined;\r\n\r\nexport function each<T extends Array<unknown> | ReadonlyArray<unknown>>(\r\n  array: T,\r\n  callback: (\r\n    value: T extends Array<infer V> | ReadonlyArray<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends ArrayLike<unknown>>(\r\n  arrayLikeObject: T,\r\n  callback: (\r\n    value: T extends ArrayLike<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, key: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each(\r\n  source: Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | PlainObject,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | Set<unknown> | PlainObject {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[] | readonly T[], item: T): boolean =>\r\n  arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => Array.from(arr || []);\r\n\r\n/**\r\n * Creates an array if the passed value is not an array, or returns the value if it is.\r\n * @param value The value.\r\n * @returns An array which represents the passed value(s).\r\n */\r\nexport const createOrKeepArray = <T>(value: T | T[]): T[] => (isArray(value) ? value : [value]);\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strVisible = 'visible';\r\nexport const strHidden = 'hidden';\r\nexport const strScroll = 'scroll';\r\n\r\nexport const capitalizeFirstLetter = (str: string | number | false | null | undefined): string => {\r\n  const finalStr = String(str || '');\r\n  return finalStr ? finalStr[0].toUpperCase() + finalStr.slice(1) : '';\r\n};\r\n","import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T> | ReadonlyArray<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: Partial<WH<T>>, b?: Partial<WH<T>>) =>\r\n  equal<Partial<WH<T>>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: Partial<XY<T>>, b?: Partial<XY<T>>) =>\r\n  equal<Partial<XY<T>>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n","export const noop = () => {}; // eslint-disable-line\r\n","import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let clear = noop;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      // @ts-ignore\r\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n      clear = () => clearTimeoutFn(timeoutId);\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n","import { mathMax, mathMin } from './alias';\r\n\r\n/**\r\n * Caps the passed number between the `min` and `max` bounds.\r\n * @param min The min bound.\r\n * @param max The max bound.\r\n * @param number The number to be capped.\r\n * @returns The capped number between min and max.\r\n */\r\nexport const capNumber = (min: number, max: number, number: number) =>\r\n  mathMax(min, mathMin(max, number));\r\n","import type { HTMLElementTarget } from './types';\r\nimport { bind, each, from, isArray } from '../utils';\r\n\r\nexport type AttributeElementTarget = HTMLElementTarget | Element;\r\n\r\nexport type DomTokens = string | string[] | false | null | undefined | void;\r\n\r\nexport const getDomTokensArray = (tokens: DomTokens) =>\r\n  from(new Set((isArray(tokens) ? tokens : (tokens || '').split(' ')).filter((token) => token)));\r\n\r\n/**\r\n * Gets a attribute with the given attribute of the given element.\r\n * @param elm The element of which the attribute shall be get.\r\n * @param attrName The attribute name which shall be get.\r\n * @returns The attribute value or `null` when the attribute is not set or `false` if the element is undefined.\r\n */\r\nexport const getAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.getAttribute(attrName);\r\n\r\n/**\r\n * Returns whether the given attribute exists on the given element.\r\n * @param elm The element.\r\n * @param attrName The attribute.\r\n * @returns A Truthy value indicates a present attrubte.\r\n */\r\nexport const hasAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.hasAttribute(attrName);\r\n\r\n/**\r\n * Sets the given attributes to the given element.\r\n * @param elm The element of which the attributes shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const setAttrs = (\r\n  elm: AttributeElementTarget,\r\n  attrNames: string | string[],\r\n  value: string | number | false | null | undefined\r\n) => {\r\n  each(getDomTokensArray(attrNames), (attrName) => {\r\n    elm && elm.setAttribute(attrName, String(value || ''));\r\n  });\r\n};\r\n\r\n/**\r\n * Removes the given attributes from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const removeAttrs = (elm: AttributeElementTarget, attrNames: string | string[]): void => {\r\n  each(getDomTokensArray(attrNames), (attrName) => elm && elm.removeAttribute(attrName));\r\n};\r\n\r\nexport const domTokenListAttr = (elm: AttributeElementTarget, attrName: string) => {\r\n  const initialArr = getDomTokensArray(getAttr(elm, attrName));\r\n  const setElmAttr = bind(setAttrs, elm, attrName);\r\n  const domTokenListOperation = (operationTokens: DomTokens, operation: 'add' | 'delete') => {\r\n    const initialArrSet = new Set(initialArr);\r\n    each(getDomTokensArray(operationTokens), (token) => {\r\n      initialArrSet[operation](token);\r\n    });\r\n    return from(initialArrSet).join(' ');\r\n  };\r\n\r\n  return {\r\n    _remove: (removeTokens: DomTokens) => setElmAttr(domTokenListOperation(removeTokens, 'delete')),\r\n    _add: (addTokens: DomTokens) => setElmAttr(domTokenListOperation(addTokens, 'add')),\r\n    _has: (hasTokens: DomTokens) => {\r\n      const tokenSet = getDomTokensArray(hasTokens);\r\n      return tokenSet.reduce(\r\n        (boolean, token) => boolean && initialArr.includes(token),\r\n        tokenSet.length > 0\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be removed.\r\n * @param value The value which shall be removed.\r\n */\r\nexport const removeAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._remove(value);\r\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n  return bind(addAttrClass, elm, attrName, value);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds value to it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added.\r\n * @param value The value which shall be added.\r\n */\r\nexport const addAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._add(value);\r\n  return bind(removeAttrClass, elm, attrName, value);\r\n};\r\n\r\nexport const addRemoveAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens,\r\n  add?: boolean\r\n) => (add ? addAttrClass : removeAttrClass)(elm, attrName, value);\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): boolean => domTokenListAttr(elm, attrName)._has(value);\r\n","import type { HTMLElementTarget } from './types';\r\nimport type { DomTokens } from './attribute';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { domTokenListAttr } from './attribute';\r\n\r\nconst createDomTokenListClass = (elm: HTMLElementTarget) => domTokenListAttr(elm, 'class');\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: HTMLElementTarget, className: DomTokens): boolean =>\r\n  createDomTokenListClass(elm)._has(className);\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: HTMLElementTarget, className: DomTokens): void => {\r\n  createDomTokenListClass(elm)._remove(className);\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: HTMLElementTarget, className: DomTokens): (() => void) => {\r\n  createDomTokenListClass(elm)._add(className);\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (\r\n  classNameA: string | false | null | undefined,\r\n  classNameB: string | false | null | undefined\r\n) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n","import { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\ntype InputElementType = Node | Element | false | null | undefined;\r\ntype OutputElementType = Node | Element | false | null | undefined;\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    return elm.matches(selector);\r\n  }\r\n  return false;\r\n};\r\n\r\nconst isBodyElement = (elm: InputElementType) => is(elm, 'body'); // don't do targetElement === ownerDocument.body in case initialization happens in memory\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => elm && elm.parentElement;\r\n\r\n/**\r\n * Returns the closest element to the passed element which matches the given selector.\r\n * @param elm The element.\r\n * @param selector The selector.\r\n * @returns The closest element to the passed element which matches the given selector.\r\n */\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType =>\r\n  isElement(elm) && elm.closest(selector);\r\n\r\n/**\r\n * Gets the focused element of the passed or default document.\r\n * @returns The focused element of the passed document.\r\n */\r\nconst getFocusedElement = (doc?: Document) => (doc || document).activeElement;\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n\r\nexport {\r\n  find,\r\n  findFirst,\r\n  is,\r\n  isBodyElement,\r\n  children,\r\n  contents,\r\n  parent,\r\n  liesBetween,\r\n  closest,\r\n  getFocusedElement,\r\n};\r\n","import { isArrayLike } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { noop } from '../utils/noop';\r\nimport { parent } from './traversal';\r\n\r\ntype ManipulationTarget = Node | false | null | undefined;\r\ntype NodeCollection = ArrayLike<Node> | ManipulationTarget;\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    const parentElm = parent(nodes);\r\n    parentElm && parentElm.removeChild(nodes);\r\n  }\r\n};\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nconst before = (\r\n  parentElm: ManipulationTarget,\r\n  preferredAnchor: ManipulationTarget,\r\n  insertedElms: NodeCollection\r\n): (() => void) => {\r\n  if (insertedElms && parentElm) {\r\n    let anchor: ManipulationTarget = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    if (isArrayLike(insertedElms)) {\r\n      fragment = document.createDocumentFragment();\r\n\r\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n      each(insertedElms, (insertedElm) => {\r\n        if (insertedElm === anchor) {\r\n          anchor = insertedElm.previousSibling;\r\n        }\r\n        fragment!.appendChild(insertedElm);\r\n      });\r\n    } else {\r\n      fragment = insertedElms;\r\n    }\r\n\r\n    // if the preferred anchor isn't null set it to a valid anchor\r\n    if (preferredAnchor) {\r\n      if (!anchor) {\r\n        anchor = parentElm.firstChild;\r\n      } else if (anchor !== preferredAnchor) {\r\n        anchor = anchor.nextSibling;\r\n      }\r\n    }\r\n\r\n    parentElm.insertBefore(fragment, anchor || null);\r\n    return () => removeElements(insertedElms);\r\n  }\r\n  return noop;\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: ManipulationTarget, children: NodeCollection) =>\r\n  before(node, null, children);\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const prependChildren = (node: ManipulationTarget, children: NodeCollection) =>\r\n  before(node, node && node.firstChild, children);\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertBefore = (node: ManipulationTarget, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node, insertedNodes);\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertAfter = (node: ManipulationTarget, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n","import { each } from '../utils/array';\r\nimport { setAttrs } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  setAttrs(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport type { HTMLElementTarget } from './types';\r\nimport { wnd } from '../utils/alias';\r\nimport { each, from } from '../utils/array';\r\nimport { isString, isNumber, isObject } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst customCssPropRegex = /^--/;\r\n\r\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\r\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${(validFiniteNumber(ratio) * 100).toFixed(3)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${validFiniteNumber(number)}px`;\r\n\r\nexport function setStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObject | false | null | undefined\r\n): void {\r\n  elm &&\r\n    styles &&\r\n    each(styles, (rawValue: StyleObjectValue, name) => {\r\n      try {\r\n        const elmStyle = elm.style;\r\n        const value = isNumber(rawValue) ? numberToCssPx(rawValue) : (rawValue || '') + '';\r\n\r\n        if (customCssPropRegex.test(name)) {\r\n          elmStyle.setProperty(name, value);\r\n        } else {\r\n          elmStyle[name as any] = value;\r\n        }\r\n      } catch {}\r\n    });\r\n}\r\n\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey>,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): string;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey> | StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>> | string {\r\n  const getSingleStyle = isString(styles);\r\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n\r\n  if (elm) {\r\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\r\n    getStylesResult = getSingleStyle\r\n      ? getCSSVal(computedStyle, styles)\r\n      : from(styles).reduce((result, key) => {\r\n          result[key] = getCSSVal(computedStyle, key);\r\n          return result;\r\n        }, getStylesResult as PlainObject);\r\n  }\r\n  return getStylesResult;\r\n}\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElementTarget,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = getStyles(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n","import type { HTMLElementTarget } from './types';\r\nimport { getStyles } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const getWindowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const getOffsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getClientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getScrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const getFractionalSize = (elm: HTMLElementTarget): Readonly<WH> => {\r\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElementTarget): boolean =>\r\n  !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n","import type { DomTokens } from './attribute';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { keys } from '../utils';\r\nimport { getDomTokensArray } from './attribute';\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerTarget = EventTarget | false | null | undefined;\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: ((event: any) => any) | false | null | undefined;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(getDomTokensArray(eventNames), (eventName) => {\r\n    target && target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: ((event: T) => any) | false | null | undefined,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const passive = (options && options._passive) ?? true;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions = {\r\n    passive,\r\n    capture,\r\n  };\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    getDomTokensArray(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener && listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target && target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventListenerTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import type { XY } from './offset';\r\nimport type { WH } from './dimensions';\r\nimport { capNumber, isNumber, mathAbs, mathSign } from '../utils';\r\n\r\nexport interface ScrollCoordinates {\r\n  /** The start (origin) scroll coordinates for each axis. */\r\n  _start: XY<number>;\r\n  /** The end scroll coordinates for each axis. */\r\n  _end: XY<number>;\r\n}\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY<number | false | null | undefined>> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElementScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n\r\n/**\r\n * Scroll Coordinates which are 0.\r\n */\r\nexport const getZeroScrollCoordinates = (): ScrollCoordinates => ({\r\n  _start: { x: 0, y: 0 },\r\n  _end: { x: 0, y: 0 },\r\n});\r\n\r\n/**\r\n * Sanatizes raw scroll coordinates.\r\n * The passed `overflowAmount` is used as the \"max\" value for each axis if the sign of the raw max value is not `0`.\r\n * Makes sure that each axis has `0` either in the start or end coordinates.\r\n * @param rawScrollCoordinates The raw scroll coordinates.\r\n * @param overflowAmount The overflow amount.\r\n * @returns\r\n */\r\nexport const sanatizeScrollCoordinates = (\r\n  rawScrollCoordinates: ScrollCoordinates,\r\n  overflowAmount: WH<number>\r\n) => {\r\n  const { _start, _end } = rawScrollCoordinates;\r\n  const { w, h } = overflowAmount;\r\n  const sanitizeAxis = (start: number, end: number, amount: number) => {\r\n    let newStart = mathSign(start) * amount;\r\n    let newEnd = mathSign(end) * amount;\r\n\r\n    if (newStart === newEnd) {\r\n      const startAbs = mathAbs(start);\r\n      const endAbs = mathAbs(end);\r\n\r\n      newEnd = startAbs > endAbs ? 0 : newEnd;\r\n      newStart = startAbs < endAbs ? 0 : newStart;\r\n    }\r\n    return [newStart + 0, newEnd + 0] as const; // \"+ 0\" prevents \"-0\" to be in the result\r\n  };\r\n\r\n  const [startX, endX] = sanitizeAxis(_start.x, _end.x, w);\r\n  const [startY, endY] = sanitizeAxis(_start.y, _end.y, h);\r\n\r\n  return {\r\n    _start: {\r\n      x: startX,\r\n      y: startY,\r\n    },\r\n    _end: {\r\n      x: endX,\r\n      y: endY,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Returns whether the passed scroll coordinates represent the browsers default scroll direction.\r\n * For the default scroll direction the following must be true:\r\n * 1. Start value is `0`.\r\n * 2. End value <= Start value.\r\n * @param scrollCoordinates The scroll coordinates.\r\n */\r\nexport const isDefaultDirectionScrollCoordinates = ({\r\n  _start,\r\n  _end,\r\n}: ScrollCoordinates): XY<boolean> => {\r\n  const getAxis = (start: number, end: number) => start === 0 && start <= end;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x),\r\n    y: getAxis(_start.y, _end.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the current scroll percent between 0..1 for each axis.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param currentScroll The current scroll position of the element.\r\n */\r\nexport const getScrollCoordinatesPercent = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  currentScroll: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, current: number) =>\r\n    capNumber(0, 1, (start - current) / (start - end) || 0);\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, currentScroll.x),\r\n    y: getAxis(_start.y, _end.y, currentScroll.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the scroll position of the given percent.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param percent The percentage of the scroll.\r\n */\r\nexport const getScrollCoordinatesPosition = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  percent: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, p: number) => start + (end - start) * p;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, percent.x),\r\n    y: getAxis(_start.y, _end.y, percent.y),\r\n  };\r\n};\r\n","import { isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(createOrKeepArray(listener), callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n","import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether its possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether its possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: boolean;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n","import { strOverflowX, strOverflowY } from './support';\r\n\r\nconst dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentScrollbarHidden = `${classNameEnvironment}-scrollbar-hidden`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// shared\r\nexport const dataValueNoClipping = 'noClipping';\r\n\r\n// body\r\nexport const dataAttributeHtmlBody = `${dataAttributePrefix}-body`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataValueHostIsHost = 'host';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportOverflowXPrefix = strOverflowX;\r\nexport const dataValueViewportOverflowYPrefix = strOverflowY;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportMeasuring = 'measuring';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportScrollbarPressed = 'scrollbarPressed';\r\nexport const dataValueViewportNoContent = 'noContent';\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  appendChildren,\r\n  getFractionalSize,\r\n  getClientSize,\r\n  getOffsetSize,\r\n  removeAttrs,\r\n  removeElements,\r\n  assignDeep,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  getStyles,\r\n  isBodyElement,\r\n  isFunction,\r\n  addEventListener,\r\n} from '~/support';\r\nimport { classNameEnvironment, classNameEnvironmentScrollbarHidden } from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\nexport interface Env {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: Env;\r\n\r\nconst createEnvironment = (): Env => {\r\n  const getNativeScrollbarSize = (\r\n    measureElm: HTMLElement,\r\n    measureElmChild: HTMLElement,\r\n    clear?: boolean\r\n  ): XY => {\r\n    // fix weird safari issue where getComputedStyle returns all empty styles by appending twice\r\n    appendChildren(document.body, measureElm);\r\n    appendChildren(document.body, measureElm);\r\n\r\n    const cSize = getClientSize(measureElm);\r\n    const oSize = getOffsetSize(measureElm);\r\n    const fSize = getFractionalSize(measureElmChild);\r\n\r\n    clear && removeElements(measureElm);\r\n\r\n    return {\r\n      x: oSize.h - cSize.h + fSize.h,\r\n      y: oSize.w - cSize.w + fSize.w,\r\n    };\r\n  };\r\n\r\n  const getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n    let result = false;\r\n    const revertClass = addClass(testElm, classNameEnvironmentScrollbarHidden);\r\n    try {\r\n      result =\r\n        getStyles(testElm, 'scrollbar-width' as StyleObjectKey) === 'none' ||\r\n        getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\r\n    } catch {}\r\n    revertClass();\r\n    return result;\r\n  };\r\n\r\n  // changes to this styles need to be reflected in the \"hide native scrollbars\" section of the structure styles\r\n  const envStyle = `.${classNameEnvironment}{scroll-behavior:auto!important;position:fixed;opacity:0;visibility:hidden;overflow:scroll;height:200px;width:200px;z-index:-1}.${classNameEnvironment} div{width:200%;height:200%;margin:10px 0}.${classNameEnvironmentScrollbarHidden}{scrollbar-width:none!important}.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar,.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar-corner{appearance:none!important;display:none!important;width:0!important;height:0!important}`;\r\n  const envDOM = createDOM(\r\n    `<div class=\"${classNameEnvironment}\"><div></div><style>${envStyle}</style></div>`\r\n  );\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) => nativeScrollbarsHiding && isBodyElement(target) && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: Env = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _scrollTimeline: !!scrollT,\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttrs(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  addEventListener(wnd, 'resize', () => {\r\n    triggerEvent('r', []);\r\n  });\r\n\r\n  if (\r\n    isFunction(wnd.matchMedia) &&\r\n    !nativeScrollbarsHiding &&\r\n    (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)\r\n  ) {\r\n    const addZoomListener = (onZoom: () => void) => {\r\n      const media = wnd.matchMedia(`(resolution: ${wnd.devicePixelRatio}dppx)`);\r\n      addEventListener(\r\n        media,\r\n        'change',\r\n        () => {\r\n          onZoom();\r\n          addZoomListener(onZoom);\r\n        },\r\n        {\r\n          _once: true,\r\n        }\r\n      );\r\n    };\r\n    addZoomListener(() => {\r\n      const [updatedNativeScrollbarSize, nativeScrollbarSizeChanged] =\r\n        updateNativeScrollbarSizeCache();\r\n\r\n      assignDeep(env._nativeScrollbarsSize, updatedNativeScrollbarSize); // keep the object and just re-assign!\r\n      triggerEvent('r', [nativeScrollbarSizeChanged]);\r\n    });\r\n  }\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): Env => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nexport type StaticInitialization = HTMLElement | false | null;\r\nexport type DynamicInitialization = HTMLElement | boolean | null;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n  getAttr,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[] | readonly string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames, (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        // isAttrChange check needed, otherwise mutationTarget might not be a valid HTMLElement\r\n        const attributeValue =\r\n          (isAttrChange && getAttr(mutationTarget as HTMLElement, attributeName || '')) || null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n","function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import {\r\n  each,\r\n  hasOwnProperty,\r\n  keys,\r\n  push,\r\n  isEmptyObject,\r\n  type,\r\n  isUndefined,\r\n  isPlainObject,\r\n  isString,\r\n  createOrKeepArray,\r\n} from '~/support';\r\nimport type { PlainObject, DeepPartial } from '~/typings';\r\nimport type { OptionsObject } from '~/options';\r\n\r\nexport type OptionsFunctionType = (this: any, ...args: any[]) => any;\r\nexport type OptionsTemplateType<T extends OptionsTemplateNativeTypes> = ExtractPropsKey<\r\n  OptionsTemplateTypeMap,\r\n  T\r\n>;\r\nexport type OptionsTemplateTypes = keyof OptionsTemplateTypeMap;\r\nexport type OptionsTemplateNativeTypes = OptionsTemplateTypeMap[keyof OptionsTemplateTypeMap];\r\n\r\nexport type OptionsTemplateValue<T extends OptionsTemplateNativeTypes = string> = T extends string\r\n  ? string extends T\r\n    ? OptionsTemplateValueNonEnum<T>\r\n    : string\r\n  : OptionsTemplateValueNonEnum<T>;\r\n\r\nexport type OptionsTemplate<T> = {\r\n  [P in keyof T]: T[P] extends OptionsObject\r\n    ? OptionsTemplate<T[P]>\r\n    : T[P] extends OptionsTemplateNativeTypes\r\n    ? OptionsTemplateValue<T[P]>\r\n    : never;\r\n};\r\n\r\nexport type OptionsValidationResult<T> = [\r\n  validated: DeepPartial<T>,\r\n  foreign: Record<string, unknown>\r\n];\r\n\r\ntype OptionsTemplateTypeMap = {\r\n  __TPL_boolean_TYPE__: boolean;\r\n  __TPL_number_TYPE__: number;\r\n  __TPL_string_TYPE__: string;\r\n  __TPL_array_TYPE__: Array<any> | ReadonlyArray<any>;\r\n  __TPL_function_TYPE__: OptionsFunctionType;\r\n  __TPL_null_TYPE__: null;\r\n  __TPL_object_TYPE__: OptionsObject;\r\n};\r\n\r\ntype OptionsTemplateValueNonEnum<T extends OptionsTemplateNativeTypes> =\r\n  | OptionsTemplateType<T>\r\n  | [OptionsTemplateType<T>, ...Array<OptionsTemplateTypes>];\r\n\r\ntype ExtractPropsKey<T, TProps extends T[keyof T]> = {\r\n  [P in keyof T]: TProps extends T[P] ? P : never;\r\n}[keyof T];\r\n\r\ntype OptionsTemplateTypesDictionary = {\r\n  readonly boolean: OptionsTemplateType<boolean>;\r\n  readonly number: OptionsTemplateType<number>;\r\n  readonly string: OptionsTemplateType<string>;\r\n  readonly array: OptionsTemplateType<Array<any>>;\r\n  readonly object: OptionsTemplateType<OptionsObject>;\r\n  readonly function: OptionsTemplateType<OptionsFunctionType>;\r\n  readonly null: OptionsTemplateType<null>;\r\n};\r\n\r\nconst optionsTemplateTypes: OptionsTemplateTypesDictionary = {\r\n  boolean: '__TPL_boolean_TYPE__',\r\n  number: '__TPL_number_TYPE__',\r\n  string: '__TPL_string_TYPE__',\r\n  array: '__TPL_array_TYPE__',\r\n  object: '__TPL_object_TYPE__',\r\n  function: '__TPL_function_TYPE__',\r\n  null: '__TPL_null_TYPE__',\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a object which looks like:\r\n * {\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n * }\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param optionsDiff When provided the returned validated object will only have properties which are different to this objects properties.\r\n * Example (assume all properties are valid to the template):\r\n * Options object            : { a: 'a', b: 'b', c: 'c' }\r\n * optionsDiff object        : { a: 'a', b: 'b', c: undefined }\r\n * Returned validated object : { c: 'c' }\r\n * Because the value of the properties a and b didn't change, they aren't included in the returned object.\r\n * Without the optionsDiff object the returned validated object would be: { a: 'a', b: 'b', c: 'c' }\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n * @param propPath The propertyPath which lead to this object. (used for error logging)\r\n */\r\nconst validateRecursive = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: DeepPartial<T>,\r\n  doWriteErrors?: boolean,\r\n  propPath?: string\r\n): OptionsValidationResult<T> => {\r\n  const validatedOptions: DeepPartial<T> = {};\r\n  const optionsCopy: DeepPartial<T> = { ...options };\r\n  const props = keys(template).filter((prop) => hasOwnProperty(options, prop));\r\n\r\n  each(props, (prop: Extract<keyof T, string>) => {\r\n    const optionsValue: any = options[prop];\r\n    const templateValue: PlainObject | string | OptionsTemplateTypes | Array<OptionsTemplateTypes> =\r\n      template[prop];\r\n    const templateIsComplex = isPlainObject(templateValue);\r\n    const propPrefix = propPath ? `${propPath}.` : '';\r\n\r\n    // if the template has a object as value, it means that the options are complex (verschachtelt)\r\n    if (templateIsComplex && isPlainObject(optionsValue)) {\r\n      const [validated, foreign] = validateRecursive(\r\n        templateValue as T,\r\n        optionsValue,\r\n        doWriteErrors,\r\n        propPrefix + prop\r\n      );\r\n      validatedOptions[prop] = validated as any;\r\n      optionsCopy[prop] = foreign as any;\r\n\r\n      each([optionsCopy, validatedOptions], (value) => {\r\n        if (isEmptyObject(value[prop])) {\r\n          delete value[prop];\r\n        }\r\n      });\r\n    } else if (!templateIsComplex) {\r\n      let isValid = false;\r\n      const errorEnumStrings: Array<string> = [];\r\n      const errorPossibleTypes: Array<string> = [];\r\n      const optionsValueType = type(optionsValue) as keyof typeof optionsTemplateTypes;\r\n      const templateValueArr: Array<string | OptionsTemplateTypes> =\r\n        createOrKeepArray(templateValue);\r\n\r\n      each(templateValueArr, (currTemplateType) => {\r\n        // if currType value isn't inside possibleTemplateTypes we assume its a enum string value\r\n        let typeString: string | undefined;\r\n        each(optionsTemplateTypes, (value: string, key: string) => {\r\n          if (value === currTemplateType) {\r\n            typeString = key;\r\n          }\r\n        });\r\n        const isEnumString = isUndefined(typeString);\r\n        if (isEnumString && isString(optionsValue)) {\r\n          // split it into a array which contains all possible values for example: [\"yes\", \"no\", \"maybe\"]\r\n          const enumStringSplit = currTemplateType.split(' ');\r\n          isValid = !!enumStringSplit.find((possibility) => possibility === optionsValue);\r\n\r\n          // build error message\r\n          push(errorEnumStrings, enumStringSplit);\r\n        } else {\r\n          isValid = optionsTemplateTypes[optionsValueType] === currTemplateType;\r\n        }\r\n\r\n        // build error message\r\n        push(errorPossibleTypes, isEnumString ? optionsTemplateTypes.string : typeString!);\r\n\r\n        // continue if invalid, break if valid\r\n        return !isValid;\r\n      });\r\n\r\n      if (isValid) {\r\n        validatedOptions[prop] = optionsValue;\r\n      } else if (doWriteErrors) {\r\n        console.warn(\r\n          `${\r\n            `The option \"${propPrefix}${prop}\" wasn't set, because it doesn't accept the type [ ${optionsValueType.toUpperCase()} ] with the value of \"${optionsValue}\".\\r\\n` +\r\n            `Accepted types are: [ ${errorPossibleTypes.join(', ').toUpperCase()} ].\\r\\n`\r\n          }${\r\n            errorEnumStrings.length > 0\r\n              ? `\\r\\nValid strings are: [ ${errorEnumStrings.join(', ')} ].`\r\n              : ''\r\n          }`\r\n        );\r\n      }\r\n\r\n      delete optionsCopy[prop];\r\n    }\r\n  });\r\n\r\n  return [validatedOptions, optionsCopy]; // optionsCopy equals now to foreign options\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a tuple which looks like:\r\n * [\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n * ]\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n */\r\nconst validateOptions = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: DeepPartial<T>,\r\n  doWriteErrors?: boolean\r\n): OptionsValidationResult<T> => validateRecursive<T>(template, options, doWriteErrors);\r\n\r\nexport { validateOptions, optionsTemplateTypes };\r\n","import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: booleanAllowedValues, // true || false\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  appendChildren,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = getOffsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = getOffsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        setStyles(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n","import { strHidden, strScroll, strVisible } from '~/support';\r\nimport type { Env } from '~/environment';\r\nimport type { XY } from '~/support';\r\nimport type { Options, OptionsCheckFn, OverflowBehavior } from '~/options';\r\nimport type { OverflowStyle } from '~/typings';\r\n\r\nexport interface ViewportOverflowState {\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport const getShowNativeOverlaidScrollbars = (checkOption: OptionsCheckFn<Options>, env: Env) => {\r\n  const { _nativeScrollbarsOverlaid } = env;\r\n  const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = checkOption(\r\n    'showNativeOverlaidScrollbars'\r\n  );\r\n\r\n  return [\r\n    showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y,\r\n    showNativeOverlaidScrollbarsChanged,\r\n  ] as const;\r\n};\r\n\r\nexport const overflowIsVisible = (overflowBehavior: string) =>\r\n  overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Creates a viewport overflow state object.\r\n * @param hasOverflow The information whether an axis has overflow.\r\n * @param overflowBehavior The overflow behavior according to the options.\r\n * @returns A object which represents the newly set overflow state.\r\n */\r\nexport const createViewportOverflowState = (\r\n  hasOverflow: Partial<XY<boolean>>,\r\n  overflowBehavior: XY<OverflowBehavior>\r\n): ViewportOverflowState => {\r\n  const getAxisOverflowStyle = (\r\n    axisBehavior: OverflowBehavior,\r\n    axisHasOverflow: boolean | undefined,\r\n    perpendicularBehavior: OverflowBehavior,\r\n    perpendicularOverflow: boolean | undefined\r\n  ): OverflowStyle => {\r\n    // convert behavior to style:\r\n    // 'visible'        -> 'hidden'\r\n    // 'hidden'         -> 'hidden'\r\n    // 'scroll'         -> 'scroll'\r\n    // 'visible-hidden' -> 'hidden'\r\n    // 'visible-scroll' -> 'scroll'\r\n    const behaviorStyle =\r\n      axisBehavior === strVisible\r\n        ? strHidden\r\n        : (axisBehavior.replace(`${strVisible}-`, '') as OverflowStyle);\r\n    const axisOverflowVisible = overflowIsVisible(axisBehavior);\r\n    const perpendicularOverflowVisible = overflowIsVisible(perpendicularBehavior);\r\n\r\n    // if no axis has overflow set 'hidden'\r\n    if (!axisHasOverflow && !perpendicularOverflow) {\r\n      return strHidden;\r\n    }\r\n\r\n    // if both axis have a visible behavior ('visible', 'visible-hidden', 'visible-scroll') set 'visible'\r\n    if (axisOverflowVisible && perpendicularOverflowVisible) {\r\n      return strVisible;\r\n    }\r\n\r\n    // this this axis has a visible behavior\r\n    if (axisOverflowVisible) {\r\n      const nonPerpendicularOverflow = axisHasOverflow ? strVisible : strHidden;\r\n      return axisHasOverflow && perpendicularOverflow\r\n        ? behaviorStyle // if both axis have an overflow set ('hidden' or 'scroll')\r\n        : nonPerpendicularOverflow; // if only this axis has an overflow set 'visible', if no axis has an overflow set 'hidden'\r\n    }\r\n\r\n    const nonOverflow =\r\n      perpendicularOverflowVisible && perpendicularOverflow ? strVisible : strHidden;\r\n    return axisHasOverflow\r\n      ? behaviorStyle // if this axis has an overflow\r\n      : nonOverflow; // if the perp. axis has a visible behavior and has an overflow set 'visible', otherwise set 'hidden'\r\n  };\r\n\r\n  const _overflowStyle = {\r\n    x: getAxisOverflowStyle(overflowBehavior.x, hasOverflow.x, overflowBehavior.y, hasOverflow.y),\r\n    y: getAxisOverflowStyle(overflowBehavior.y, hasOverflow.y, overflowBehavior.x, hasOverflow.x),\r\n  };\r\n\r\n  return {\r\n    _overflowStyle,\r\n    _overflowScroll: {\r\n      x: _overflowStyle.x === strScroll,\r\n      y: _overflowStyle.y === strScroll,\r\n    },\r\n  };\r\n};\r\n","import {\r\n  keys,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  getStyles,\r\n  setStyles,\r\n  removeAttrClass,\r\n  strWidth,\r\n  strOverflowY,\r\n  strOverflowX,\r\n  strScroll,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport { getShowNativeOverlaidScrollbars } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { ObserversSetupState } from '~/setups';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type { ViewportOverflowState } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { Env } from '~/environment';\r\nimport type { WH } from '~/support';\r\nimport type { OverflowStyle, StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _viewportArrangement: (\r\n        structureSetupElements: StructureSetupElementsObj,\r\n        structureSetupState: StructureSetupState,\r\n        observersSetupState: ObserversSetupState,\r\n        env: Env,\r\n        checkOptions: OptionsCheckFn<Options>\r\n      ) => {\r\n        const { _viewportIsTarget, _viewport } = structureSetupElements;\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _nativeScrollbarsSize } = env;\r\n        const doViewportArrange =\r\n          !_viewportIsTarget &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const [showNativeOverlaidScrollbars] = getShowNativeOverlaidScrollbars(checkOptions, env);\r\n\r\n        /**\r\n         * Gets the current overflow state of the viewport.\r\n         */\r\n        const readViewportOverflowState = (): ViewportOverflowState => {\r\n          const getStatePerAxis = (styleKey: StyleObjectKey) => {\r\n            const overflowStyle = getStyles(_viewport, styleKey) as OverflowStyle;\r\n            const overflowScroll = overflowStyle === strScroll;\r\n\r\n            return [overflowStyle, overflowScroll] as const;\r\n          };\r\n\r\n          const [xOverflowStyle, xOverflowScroll] = getStatePerAxis(strOverflowX);\r\n          const [yOverflowStyle, yOverflowScroll] = getStatePerAxis(strOverflowY);\r\n\r\n          return {\r\n            _overflowStyle: {\r\n              x: xOverflowStyle,\r\n              y: yOverflowStyle,\r\n            },\r\n            _overflowScroll: {\r\n              x: xOverflowScroll,\r\n              y: yOverflowScroll,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Gets the hide offset matching the passed overflow state.\r\n         * @param viewportOverflowState The overflow state of the viewport\r\n         */\r\n        const _getViewportOverflowHideOffset = (viewportOverflowState: ViewportOverflowState) => {\r\n          const { _overflowScroll } = viewportOverflowState;\r\n          const arrangeHideOffset =\r\n            _nativeScrollbarsHiding || showNativeOverlaidScrollbars ? 0 : 42;\r\n\r\n          const getHideOffsetPerAxis = (\r\n            isOverlaid: boolean,\r\n            overflowScroll: boolean,\r\n            nativeScrollbarSize: number\r\n          ) => {\r\n            const nonScrollbarStylingHideOffset = isOverlaid\r\n              ? arrangeHideOffset\r\n              : nativeScrollbarSize;\r\n            const scrollbarsHideOffset =\r\n              overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n            const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n            return [scrollbarsHideOffset, scrollbarsHideOffsetArrange] as const;\r\n          };\r\n\r\n          const [xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.x,\r\n            _overflowScroll.x,\r\n            _nativeScrollbarsSize.x\r\n          );\r\n          const [yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.y,\r\n            _overflowScroll.y,\r\n            _nativeScrollbarsSize.y\r\n          );\r\n\r\n          return {\r\n            _scrollbarsHideOffset: {\r\n              x: xScrollbarsHideOffset,\r\n              y: yScrollbarsHideOffset,\r\n            },\r\n            _scrollbarsHideOffsetArrange: {\r\n              x: xScrollbarsHideOffsetArrange,\r\n              y: yScrollbarsHideOffsetArrange,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Hides the native scrollbars according to the passed parameters.\r\n         * @param viewportOverflowState The viewport overflow state.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n         * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n         */\r\n        const _hideNativeScrollbars = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          { _directionIsRTL }: ObserversSetupState,\r\n          viewportArrange: boolean\r\n        ): StyleObject | undefined => {\r\n          if (!_viewportIsTarget) {\r\n            const viewportStyleObj: StyleObject = assignDeep(\r\n              {},\r\n              {\r\n                [strMarginRight]: 0,\r\n                [strMarginBottom]: 0,\r\n                [strMarginLeft]: 0,\r\n              }\r\n            );\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const horizontalMarginKey: keyof StyleObject = _directionIsRTL\r\n              ? strMarginLeft\r\n              : strMarginRight;\r\n            const viewportHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingLeft\r\n              : strPaddingRight;\r\n            const horizontalMarginValue = _viewportPaddingStyle[horizontalMarginKey] as number;\r\n            const verticalMarginValue = _viewportPaddingStyle[strMarginBottom] as number;\r\n            const horizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportHorizontalPaddingKey\r\n            ] as number;\r\n            const verticalPaddingValue = _viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n            // horizontal\r\n            viewportStyleObj[strWidth] = `calc(100% + ${\r\n              hideOffsetY + horizontalMarginValue * -1\r\n            }px)`;\r\n            viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n            // vertical\r\n            viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n            // viewport arrange additional styles\r\n            if (viewportArrange) {\r\n              viewportStyleObj[viewportHorizontalPaddingKey] =\r\n                horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n              viewportStyleObj[strPaddingBottom] =\r\n                verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n            }\r\n\r\n            return viewportStyleObj;\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const _arrangeViewport = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          viewportScrollSize: WH<number>,\r\n          sizeFraction: WH<number>\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _directionIsRTL } = observersSetupState;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            setStyles(_viewport, {\r\n              '--os-vaw': arrangeSize.w,\r\n              '--os-vah': arrangeSize.h,\r\n            });\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const _undoViewportArrange = (viewportOverflowState?: ViewportOverflowState) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState = viewportOverflowState || readViewportOverflowState();\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffsetArrange } = _getViewportOverflowHideOffset(\r\n              finalViewportOverflowState\r\n            );\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = getStyles(_viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n            const addArrange = removeAttrClass(\r\n              _viewport,\r\n              dataAttributeViewport,\r\n              dataValueViewportArrange\r\n            );\r\n\r\n            setStyles(_viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                setStyles(\r\n                  _viewport,\r\n                  assignDeep(\r\n                    {},\r\n                    prevStyle,\r\n                    _hideNativeScrollbars(\r\n                      finalViewportOverflowState,\r\n                      observersSetupState,\r\n                      doViewportArrange\r\n                    )\r\n                  )\r\n                );\r\n                addArrange();\r\n              },\r\n              finalViewportOverflowState,\r\n            ] as const;\r\n          }\r\n          return [noop] as const;\r\n        };\r\n\r\n        return {\r\n          _getViewportOverflowHideOffset,\r\n          _arrangeViewport,\r\n          _undoViewportArrange,\r\n          _hideNativeScrollbars,\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n","import { animateNumber, noop, setT } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        getHandleOffset: (handleRect?: DOMRect, trackRect?: DOMRect) => number,\r\n        startOffset: number,\r\n        handleLength: number,\r\n        relativeTrackPointerOffset: number\r\n      ): (() => void) => {\r\n        // click scroll animation\r\n        let iteration = 0;\r\n        let clear = noop;\r\n        const animateClickScroll = (clickScrollProgress: number) => {\r\n          clear = animateNumber(\r\n            clickScrollProgress,\r\n            clickScrollProgress + handleLength * Math.sign(startOffset),\r\n            133,\r\n            (animationProgress, _, animationCompleted) => {\r\n              moveHandleRelative(animationProgress);\r\n              const handleStartBound = getHandleOffset();\r\n              const handleEndBound = handleStartBound + handleLength;\r\n              const mouseBetweenHandleBounds =\r\n                relativeTrackPointerOffset >= handleStartBound &&\r\n                relativeTrackPointerOffset <= handleEndBound;\r\n\r\n              if (animationCompleted && !mouseBetweenHandleBounds) {\r\n                if (iteration) {\r\n                  animateClickScroll(animationProgress);\r\n                } else {\r\n                  const firstIterationPauseTimeout = setT(() => {\r\n                    animateClickScroll(animationProgress);\r\n                  }, 222);\r\n                  clear = () => {\r\n                    clearTimeout(firstIterationPauseTimeout);\r\n                  };\r\n                }\r\n                iteration++;\r\n              }\r\n            }\r\n          );\r\n        };\r\n\r\n        animateClickScroll(0);\r\n\r\n        return () => clear();\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n","import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  appendChildren,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const { _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (sizeChangedContext?: ResizeObserverEntry | boolean) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        appear = domRectAppeared(currRContentRect, prevContentRect);\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _sizeChanged: true,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n","import {\r\n  createDiv,\r\n  getOffsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = getOffsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n","import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  each,\r\n  equalWH,\r\n  getFractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  isString,\r\n  keys,\r\n  liesBetween,\r\n  removeAttrs,\r\n  getScrollSize,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  inArray,\r\n  domRectAppeared,\r\n  concat,\r\n  getAttr,\r\n  setAttrs,\r\n  getStyles,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueViewportMeasuring,\r\n  dataValueViewportArrange,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo, StructureSetupState } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  getCurrentOption: OptionsCheckFn<Options>,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n  let prevDirectionIsRTL: boolean | undefined;\r\n\r\n  const { _nativeScrollbarsHiding } = getEnvironment();\r\n\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const viewportAttrsFromTarget = ['tabindex'] as const;\r\n  const baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'] as const;\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open'] as const;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _scrollOffsetElement,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n\r\n  const getDirectionIsRTL = (elm: HTMLElement): boolean => getStyles(elm, 'direction') === 'rtl';\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(_target),\r\n  };\r\n  const env = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const _undoViewportArrange =\r\n        scrollbarsHidingPlugin &&\r\n        scrollbarsHidingPlugin._viewportArrangement(\r\n          structureSetupElements,\r\n          structureSetupState,\r\n          state,\r\n          env,\r\n          getCurrentOption\r\n        )._undoViewportArrange;\r\n\r\n      const isArranged = !_viewportIsTarget && _viewportHasClass(dataValueViewportArrange);\r\n      const scrollOffset = isArranged && getElementScroll(_scrollOffsetElement);\r\n\r\n      const revertMeasuring = _viewportAddRemoveClass(dataValueViewportMeasuring, true);\r\n      const redoViewportArrange = isArranged && _undoViewportArrange && _undoViewportArrange()[0];\r\n\r\n      const contentScroll = getScrollSize(_content);\r\n      const viewportScroll = getScrollSize(_viewport);\r\n      const fractional = getFractionalSize(_viewport);\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      revertMeasuring();\r\n\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : concat(baseStyleChangingAttrs, baseStyleChangingAttrsTextarea);\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const setDirection = (updateHints: ObserversSetupUpdateHints) => {\r\n    const newDirectionIsRTL = getDirectionIsRTL(_target);\r\n    assignDeep(updateHints, { _directionChanged: prevDirectionIsRTL !== newDirectionIsRTL });\r\n    assignDeep(state, { _directionIsRTL: newDirectionIsRTL });\r\n    prevDirectionIsRTL = newDirectionIsRTL;\r\n  };\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (inArray(viewportAttrsFromTarget, attribute)) {\r\n        const hostAttr = getAttr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          setAttrs(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttrs(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({ _sizeChanged, _appear }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && _nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    updateFn(updateHints);\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _hostMutation: targetStyleChanged,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const { _addResizeListener } = env;\r\n  const [constructTrinsicObserver, updateTrinsicObserver] = _content\r\n    ? createTrinsicObserver(_host, onTrinsicChanged)\r\n    : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: concat(baseStyleChangingAttrs, viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = _addResizeListener((_scrollbarSizeChanged) => {\r\n        const [, _contentMutation] = updateContentSizeCache();\r\n        onObserversUpdatedDebounced({ _scrollbarSizeChanged, _contentMutation });\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(contentMutationObserverAttr, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      setDirection(updateHints);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isBoolean,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  bind,\r\n  getElementScroll,\r\n  inArray,\r\n  strWidth,\r\n  strHeight,\r\n  concat,\r\n  assignDeep,\r\n  ratioToCssPercent,\r\n  numberToCssPx,\r\n  setStyles,\r\n  createOrKeepArray,\r\n  getBoundingClientRect,\r\n  capNumber,\r\n  getScrollCoordinatesPercent,\r\n  isDefaultDirectionScrollCoordinates,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type { XY } from '~/support';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollTimeline: AnimationTimeline | undefined;\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\ntype PotentialAnimation = Animation | false | null | undefined;\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const elementAnimations = new Map<HTMLElement, PotentialAnimation[]>();\r\n  const initScrollTimeline = (axis: keyof XY<unknown>) =>\r\n    scrollT &&\r\n    new scrollT({\r\n      source: _scrollOffsetElement,\r\n      axis,\r\n    });\r\n  const scrollTimeline = {\r\n    x: initScrollTimeline('x'),\r\n    y: initScrollTimeline('y'),\r\n  };\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n\r\n  /**\r\n   * Gets the scrollbar handle length ratio.\r\n   * @param isHorizontal Whether the axis is horizontal.\r\n   * @param scrollbarStructure The scrollbar structure. Only passed when the length ratio is calculated for the offset ratio (respects handle min. & max. size via. css)\r\n   * @returns The scrollbar handle length ratio.\r\n   */\r\n  const getScrollbarHandleLengthRatio = (\r\n    isHorizontal: boolean | undefined,\r\n    scrollbarStructure?: ScrollbarStructure\r\n  ) => {\r\n    if (scrollbarStructure) {\r\n      const axis = isHorizontal ? strWidth : strHeight;\r\n      const { _track, _handle } = scrollbarStructure;\r\n\r\n      const handleSize = getBoundingClientRect(_handle)[axis];\r\n      const trackSize = getBoundingClientRect(_track)[axis];\r\n\r\n      return capNumber(0, 1, handleSize / trackSize || 0);\r\n    }\r\n\r\n    const axis = isHorizontal ? 'x' : 'y';\r\n    const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n\r\n    const viewportSize = _overflowEdge[axis];\r\n    const overflowAmount = _overflowAmount[axis];\r\n\r\n    return capNumber(0, 1, viewportSize / (viewportSize + overflowAmount) || 0);\r\n  };\r\n\r\n  /**\r\n   * Gets the scrollbar handle offset ratio.\r\n   * @param structureSetupState The structure setup state.\r\n   * @param scrollbarStructure The scrollbar structure.\r\n   * @param scrollPercent The scroll percent 0..1.\r\n   * @param isHorizontal Whether the axis is horizontal.\r\n   * @returns The scrollbar handle offset ratio.\r\n   */\r\n  const getScrollbarHandleOffsetRatio = (\r\n    scrollbarStructure: ScrollbarStructure,\r\n    scrollPercent: number,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const lengthRatio = getScrollbarHandleLengthRatio(isHorizontal, scrollbarStructure);\r\n\r\n    return (1 / lengthRatio) * (1 - lengthRatio) * scrollPercent;\r\n  };\r\n\r\n  /**\r\n   * Adds additional directional keyframes to the passed keyframes.\r\n   * @param keyframes The keyframes.\r\n   * @param directionRTL Whether the direction is RTL.\r\n   * @returns The passed keyframes with additional directional keyframes.\r\n   */\r\n  const addDirectionRTLKeyframes = (keyframes: Keyframe[] | PropertyIndexedKeyframes | null) =>\r\n    assignDeep(keyframes, {\r\n      // dummy keyframe which fixes bug where the scrollbar handle is reverted to origin position when it should be at its max position\r\n      clear: ['left'],\r\n    });\r\n\r\n  /**\r\n   * Cancels the animations of the passed elements or of all elements if no elements are passed.\r\n   * @param elements The elements of which the animation shall be canceled.\r\n   */\r\n  const cancelElementAnimations = (elements?: HTMLElement | HTMLElement[]) => {\r\n    elementAnimations.forEach((currAnimations, element) => {\r\n      const doCancel = elements ? inArray(createOrKeepArray(elements), element) : true;\r\n      if (doCancel) {\r\n        each(currAnimations || [], (animation) => {\r\n          animation && animation.cancel();\r\n        });\r\n        elementAnimations.delete(element);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Sets of overwrites the animation of the passed element.\r\n   * @param element The element of which the animation shall be set.\r\n   * @param timeline The animation timeline of the animation.\r\n   * @param keyframes The keyframes of the animation.\r\n   * @param composite The composite information of the animation.\r\n   */\r\n  const setElementAnimation = (\r\n    element: HTMLElement,\r\n    timeline: AnimationTimeline,\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    composite?: CompositeOperation\r\n  ) => {\r\n    const activeAnimations = elementAnimations.get(element) || [];\r\n    const activeAnimation = activeAnimations.find(\r\n      (animation) => animation && animation.timeline === timeline\r\n    );\r\n\r\n    if (activeAnimation) {\r\n      activeAnimation.effect = new KeyframeEffect(element, keyframes, { composite });\r\n    } else {\r\n      elementAnimations.set(\r\n        element,\r\n        concat(activeAnimations, [\r\n          element.animate(keyframes, {\r\n            timeline,\r\n            composite,\r\n          }),\r\n        ])\r\n      );\r\n    }\r\n  };\r\n\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject | false | null | undefined]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      setStyles(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarStyle(scrollbarStructures, (structure) => {\r\n      const { _handle } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? strWidth : strHeight]: ratioToCssPercent(\r\n            getScrollbarHandleLengthRatio(isHorizontal)\r\n          ),\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const { _scrollCoordinates } = structureSetupState;\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n    const axisScrollTimeline = scrollTimeline[xyKey];\r\n    const axisIsDefaultDirectionScroll =\r\n      isDefaultDirectionScrollCoordinates(_scrollCoordinates)[xyKey];\r\n    const getAxisTransformValue = (scrollbarStructure: ScrollbarStructure, scrollPercent: number) =>\r\n      getTrasformTranslateValue(\r\n        ratioToCssPercent(\r\n          getScrollbarHandleOffsetRatio(\r\n            scrollbarStructure,\r\n            axisIsDefaultDirectionScroll ? scrollPercent : 1 - scrollPercent,\r\n            isHorizontal\r\n          )\r\n        ),\r\n        isHorizontal\r\n      );\r\n\r\n    if (axisScrollTimeline) {\r\n      each(scrollbarStructures, (structure: ScrollbarStructure) => {\r\n        const { _handle } = structure;\r\n        setElementAnimation(\r\n          _handle,\r\n          axisScrollTimeline,\r\n          addDirectionRTLKeyframes({\r\n            transform: [0, 1].map((percent) => getAxisTransformValue(structure, percent)),\r\n          })\r\n        );\r\n      });\r\n    } else {\r\n      scrollbarStyle(scrollbarStructures, (structure) => [\r\n        structure._handle,\r\n        {\r\n          transform: getAxisTransformValue(\r\n            structure,\r\n            getScrollCoordinatesPercent(_scrollCoordinates, getElementScroll(_scrollOffsetElement))[\r\n              xyKey\r\n            ]\r\n          ),\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n  const doRefreshScrollbarOffset = (scrollbar: HTMLElement) =>\r\n    _viewportIsTarget && !_isBody && parent(scrollbar) === _viewport;\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget) {\r\n      const { _overflowAmount, _scrollCoordinates } = structureSetupState;\r\n      const isDefaultDirectionScroll = isDefaultDirectionScrollCoordinates(_scrollCoordinates);\r\n      const cushion = 0.5; // otherwise it sometimes happens that scrolling to 100% will cause the scrollbars to disappear\r\n\r\n      if (scrollTimeline.x && scrollTimeline.y) {\r\n        each(concat(verticalScrollbars, horizontalScrollbars), ({ _scrollbar }) => {\r\n          if (doRefreshScrollbarOffset(_scrollbar)) {\r\n            const setScrollbarElementAnimation = (axis: keyof XY<unknown>) =>\r\n              setElementAnimation(\r\n                _scrollbar,\r\n                scrollTimeline[axis],\r\n                addDirectionRTLKeyframes({\r\n                  transform: [0, isDefaultDirectionScroll[axis] ? 1 : -1].map((percent) =>\r\n                    getTrasformTranslateValue(\r\n                      numberToCssPx(percent * (_overflowAmount[axis] - cushion)),\r\n                      axis === 'x'\r\n                    )\r\n                  ),\r\n                }),\r\n                'add'\r\n              );\r\n\r\n            setScrollbarElementAnimation('x');\r\n            setScrollbarElementAnimation('y');\r\n          } else {\r\n            cancelElementAnimations(_scrollbar);\r\n          }\r\n        });\r\n      } else {\r\n        const scrollPercent = getScrollCoordinatesPercent(\r\n          _scrollCoordinates,\r\n          getElementScroll(_scrollOffsetElement)\r\n        );\r\n        const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n          const { _scrollbar } = structure;\r\n          const elm = doRefreshScrollbarOffset(_scrollbar) && _scrollbar;\r\n          const getTranslateValue = (\r\n            axisScrollPercent: number,\r\n            axisOverflowAmount: number,\r\n            axisIsDefaultCoordinates: boolean\r\n          ) => {\r\n            const px = axisOverflowAmount * axisScrollPercent;\r\n            return numberToCssPx(axisIsDefaultCoordinates ? px : -px);\r\n          };\r\n\r\n          return [\r\n            elm,\r\n            elm && {\r\n              transform: getTrasformTranslateValue({\r\n                x: getTranslateValue(\r\n                  scrollPercent.x,\r\n                  _overflowAmount.x,\r\n                  isDefaultDirectionScroll.x\r\n                ),\r\n                y: getTranslateValue(\r\n                  scrollPercent.y,\r\n                  _overflowAmount.y,\r\n                  isDefaultDirectionScroll.y\r\n                ),\r\n              }),\r\n            },\r\n          ] as [HTMLElement | false, StyleObject | false];\r\n        };\r\n        scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n        scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n      }\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const scrollbar = createDiv(`${classNameScrollbar} ${scrollbarClassName}`);\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    push(isHorizontal ? horizontalScrollbars : verticalScrollbars, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      cancelElementAnimations,\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        scrollbarStructureRefreshHandleOffset,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollTimeline: scrollTimeline.x,\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollTimeline: scrollTimeline.y,\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  getFocusedElement,\r\n  setT,\r\n  hasAttr,\r\n  stopAndPrevent,\r\n  isFunction,\r\n  mathAbs,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarPressed,\r\n} from '~/classnames';\r\nimport type { XY } from '~/support';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  refreshScrollbarStructuresHandleOffset: (\r\n    scrollbarStructure: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => void,\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarHandlePointerInteraction: (event: PointerEvent) => void\r\n): ScrollbarsSetupEvents => {\r\n  return (\r\n    scrollbarStructure,\r\n    scrollbarsAddRemoveClass,\r\n    refreshScrollbarStructuresHandleOffset,\r\n    isHorizontal\r\n  ) => {\r\n    const {\r\n      _host,\r\n      _viewport,\r\n      _viewportIsTarget,\r\n      _scrollOffsetElement,\r\n      _documentElm,\r\n      _viewportAddRemoveClass,\r\n    } = structureSetupElements;\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [scrollSnapScrollTransitionTimeout, clearScrollSnapScrollTransitionTimeout] =\r\n      selfClearTimeout(444);\r\n    const [requestHandleTransitionAnimationFrame, clearHandleTransitionTimeout] =\r\n      selfClearTimeout();\r\n    const refreshHandleOffsetTransition = bind(\r\n      refreshScrollbarStructuresHandleOffset,\r\n      [scrollbarStructure],\r\n      isHorizontal\r\n    );\r\n    const scrollOffsetElementScrollBy = (coordinates: XY<number>) => {\r\n      isFunction(_scrollOffsetElement.scrollBy) &&\r\n        _scrollOffsetElement.scrollBy({\r\n          behavior: 'smooth',\r\n          left: coordinates.x,\r\n          top: coordinates.y,\r\n        });\r\n    };\r\n    const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointercancel lostpointercapture';\r\n      const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY';\r\n      const leftTopKey = isHorizontal ? 'left' : 'top';\r\n      const whKey = isHorizontal ? 'w' : 'h';\r\n      const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = getOffsetSize(_track)[whKey] - getOffsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'] &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        if (continuePointerDown) {\r\n          clearScrollSnapScrollTransitionTimeout();\r\n\r\n          const instantClickScroll = !isDragScroll && pointerDownEvent.shiftKey;\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              getOffsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElementScroll(_scrollOffsetElement)[xyKey],\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(offFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n          const addScrollbarPressedClass = () =>\r\n            _viewportAddRemoveClass(dataValueViewportScrollbarPressed, true);\r\n          const removeScrollbarPressedClass = addScrollbarPressedClass();\r\n\r\n          const offFns = [\r\n            () => {\r\n              const withoutSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n              removeScrollbarPressedClass();\r\n              const withSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n              const snapScrollDiff = {\r\n                x: withSnapScrollOffset.x - withoutSnapScrollOffset.x,\r\n                y: withSnapScrollOffset.y - withoutSnapScrollOffset.y,\r\n              };\r\n\r\n              if (mathAbs(snapScrollDiff.x) > 3 || mathAbs(snapScrollDiff.y) > 3) {\r\n                addScrollbarPressedClass();\r\n                scrollElementTo(_scrollOffsetElement, withoutSnapScrollOffset);\r\n                scrollOffsetElementScrollBy(snapScrollDiff);\r\n                scrollSnapScrollTransitionTimeout(removeScrollbarPressedClass);\r\n              }\r\n            },\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) => {\r\n              const relativeMovement = pointerMoveEvent[clientXYKey] - pointerDownOffset;\r\n\r\n              if (isDragScroll || instantClickScroll) {\r\n                moveHandleRelative(startOffset + relativeMovement);\r\n              }\r\n            }),\r\n          ];\r\n\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n\r\n            animateClickScroll &&\r\n              push(\r\n                offFns,\r\n                animateClickScroll(\r\n                  moveHandleRelative,\r\n                  getHandleOffset,\r\n                  startOffset,\r\n                  handleLength,\r\n                  relativeTrackPointerOffset\r\n                )\r\n              );\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n    const isAffectingTransition = (event: TransitionEvent) =>\r\n      event.propertyName.indexOf(widthHeightKey) > -1;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_handle, 'pointermove pointerleave', scrollbarHandlePointerInteraction),\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      // focus viewport when clicking on a scrollbar (mouse only)\r\n      !_viewportIsTarget &&\r\n        addEventListener(_scrollbar, 'mousedown', () => {\r\n          const focusedElement = getFocusedElement();\r\n          if (\r\n            hasAttr(focusedElement, dataAttributeViewport) ||\r\n            hasAttr(focusedElement, dataAttributeHost) ||\r\n            focusedElement === document.body\r\n          ) {\r\n            setT(() => {\r\n              _viewport.focus({ preventScroll: true });\r\n            }, 25);\r\n          }\r\n        }),\r\n      // propagate wheel events to viewport when mouse is over scrollbar\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            scrollOffsetElementScrollBy({\r\n              x: deltaX,\r\n              y: deltaY,\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      // when the handle has a size transition, update the handle offset each frame for the time of the transition\r\n      addEventListener(_handle, 'transitionstart', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          const animateHandleOffset = () => {\r\n            refreshHandleOffsetTransition();\r\n            requestHandleTransitionAnimationFrame(animateHandleOffset);\r\n          };\r\n          animateHandleOffset();\r\n        }\r\n      }),\r\n      addEventListener(_handle, 'transitionend transitioncancel', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          clearHandleTransitionTimeout();\r\n          refreshHandleOffsetTransition();\r\n        }\r\n      }),\r\n      // solve problem of interaction causing click events\r\n      addEventListener(\r\n        _scrollbar,\r\n        'pointerdown',\r\n        // stopPropagation for stopping event propagation (causing click listeners to be invoked)\r\n        // preventDefault to prevent the pointer to cause any actions (e.g. releasing mouse button over an <a> tag causes an navigation)\r\n        bind(addEventListener, _documentElm, 'click', stopAndPrevent, {\r\n          _once: true,\r\n          _capture: true,\r\n          _passive: false,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      clearScrollSnapScrollTransitionTimeout,\r\n      clearHandleTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n","import {\r\n  bind,\r\n  noop,\r\n  addEventListener,\r\n  push,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  strScroll,\r\n  strVisible,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport type { OverflowBehavior, ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let mouseInHost: boolean | undefined;\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideIsNever: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [autoHideInstantInteractionTimeout, clearAutoHideInstantInteractionTimeout] =\r\n    selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoHideTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(\r\n      options,\r\n      structureSetupElements,\r\n      structureSetupState,\r\n      (event) =>\r\n        isHoverablePointerType(event) &&\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        manageScrollbarsAutoHideInstantInteraction()\r\n    )\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoHideTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n  const manageScrollbarsAutoHideInstantInteraction = () => {\r\n    if (autoHideIsLeave ? !mouseInHost : !autoHideIsNever) {\r\n      manageScrollbarsAutoHide(true);\r\n      autoHideInstantInteractionTimeout(() => {\r\n        manageScrollbarsAutoHide(false);\r\n      });\r\n    }\r\n  };\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      autoHideIsLeave && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n  const destroyFns: (() => void)[] = [\r\n    clearAutoHideTimeout,\r\n    clearAutoHideInstantInteractionTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const {\r\n        _overflowEdgeChanged,\r\n        _overflowAmountChanged,\r\n        _overflowStyleChanged,\r\n        _scrollCoordinatesChanged,\r\n      } = _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const [overflow, overflowChanged] = _checkOption('overflow');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged ||\r\n        _overflowAmountChanged ||\r\n        _scrollCoordinatesChanged ||\r\n        _directionChanged ||\r\n        _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged || overflowChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (\r\n        overflowBehavior: OverflowBehavior,\r\n        overflowStyle: OverflowStyle,\r\n        isHorizontal: boolean\r\n      ) => {\r\n        const isVisible =\r\n          overflowBehavior.includes(strScroll) &&\r\n          (visibility === strVisible || (visibility === 'auto' && overflowStyle === strScroll));\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideIsNever = autoHide === 'never';\r\n        manageScrollbarsAutoHide(autoHideIsNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, clickScroll);\r\n      }\r\n\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(overflow.x, _overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(overflow.y, _overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      if (updateScrollbars) {\r\n        // order is matter! length has to be refreshed before offset\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsScrollbarOffset();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  removeAttrs,\r\n  hasAttrClass,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n  addAttrClass,\r\n  addRemoveAttrClass,\r\n  setAttrs,\r\n  getAttr,\r\n  stopPropagation,\r\n  isBodyElement,\r\n  getFocusedElement,\r\n  wnd,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n  dataAttributeHtmlBody,\r\n  dataValueHostIsHost,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n} from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  _originalScrollOffsetElement: HTMLElement;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _windowElm: () => Window;\r\n  _viewportHasClass: (viewportAttributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) => () => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    host: defaultHostInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isBody = isBodyElement(targetElement);\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const getDocumentWindow = () => ownerDocument.defaultView || wnd;\r\n  const focusElm = (customActiveElm: Element | null) => {\r\n    if (customActiveElm && (customActiveElm as HTMLElement).focus) {\r\n      (customActiveElm as HTMLElement).focus({ preventScroll: true });\r\n    }\r\n  };\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // viewport element has higher priority and content element will not be generated\r\n  // will act the same way as initialization: `{ elements: { viewport, content: false } }`\r\n  const viewportIsContent = !viewportIsTarget && possibleViewportElement === possibleContentElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : possibleViewportElement;\r\n  const nonBodyHostElement = isTextarea\r\n    ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n    : (targetElement as HTMLElement);\r\n  const hostElement = viewportIsTargetBody ? viewportElement : nonBodyHostElement;\r\n  const paddingElement =\r\n    !viewportIsTarget &&\r\n    dynamicInitializationElement(createNewDiv, defaultPaddingInitialization, paddingInitialization);\r\n  const contentElement = !viewportIsContent && possibleContentElement;\r\n  const generatedElements = [contentElement, viewportElement, paddingElement, hostElement].map(\r\n    (elm) => isHTMLElement(elm) && !parent(elm) && elm\r\n  );\r\n  const elementIsGenerated = (elm: HTMLElement | false) => elm && inArray(generatedElements, elm);\r\n  const originalNonBodyScrollOffsetElement = elementIsGenerated(viewportElement)\r\n    ? targetElement\r\n    : viewportElement;\r\n\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding: paddingElement,\r\n    _content: contentElement,\r\n    _scrollOffsetElement: viewportIsTargetBody ? docElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _originalScrollOffsetElement: isBody ? docElement : originalNonBodyScrollOffsetElement,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _windowElm: getDocumentWindow,\r\n    _viewportHasClass: (viewportAttributeClassName: string) =>\r\n      hasAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName),\r\n    _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) =>\r\n      addRemoveAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName, add),\r\n  };\r\n  const { _target, _host, _padding, _viewport, _content } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttrs(_host, [dataAttributeHost, dataAttributeInitialize]);\r\n      removeAttrs(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttrs(docElement, [dataAttributeInitialize, dataAttributeHost]);\r\n      }\r\n    },\r\n  ];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elm && !elementIsGenerated(elm)\r\n        )\r\n      );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    const docWnd = getDocumentWindow();\r\n    const initActiveElm = getFocusedElement();\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n    // wrapping / unwrapping will cause the focused element to blur, this should prevent those events to surface\r\n    const prepareWrapUnwrapFocus = (activeElement?: Element | null) =>\r\n      addEventListener(activeElement, 'focusin focusout focus blur', stopPropagation, {\r\n        _capture: true,\r\n      });\r\n    const tabIndexStr = 'tabindex';\r\n    const ogTabindex = getAttr(_viewport, tabIndexStr);\r\n    const undoInitWrapUndwrapFocus = prepareWrapUnwrapFocus(initActiveElm);\r\n    setAttrs(_host, dataAttributeHost, viewportIsTarget ? '' : dataValueHostIsHost);\r\n    setAttrs(_padding, dataAttributePadding, '');\r\n    setAttrs(_viewport, dataAttributeViewport, '');\r\n    setAttrs(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      setAttrs(_viewport, tabIndexStr, ogTabindex || '-1');\r\n      isBody && setAttrs(docElement, dataAttributeHtmlBody, '');\r\n    }\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, [\r\n      undoInitWrapUndwrapFocus,\r\n      () => {\r\n        const destroyActiveElm = getFocusedElement();\r\n        const undoDestroyWrapUndwrapFocus = prepareWrapUnwrapFocus(destroyActiveElm);\r\n        removeAttrs(_padding, dataAttributePadding);\r\n        removeAttrs(_content, dataAttributeContent);\r\n        removeAttrs(_viewport, dataAttributeViewport);\r\n        isBody && removeAttrs(docElement, dataAttributeHtmlBody);\r\n        ogTabindex\r\n          ? setAttrs(_viewport, tabIndexStr, ogTabindex)\r\n          : removeAttrs(_viewport, tabIndexStr);\r\n\r\n        elementIsGenerated(_content) && unwrap(_content);\r\n        elementIsGenerated(_viewport) && unwrap(_viewport);\r\n        elementIsGenerated(_padding) && unwrap(_padding);\r\n        focusElm(destroyActiveElm);\r\n        undoDestroyWrapUndwrapFocus();\r\n      },\r\n    ]);\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      addAttrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden);\r\n      push(destroyFns, bind(removeAttrs, _viewport, dataAttributeViewport));\r\n    }\r\n\r\n    // focus viewport if previously focused element was target, otherwise focus previously focused element\r\n    focusElm(\r\n      !viewportIsTarget && initActiveElm === targetElement && docWnd.top === docWnd\r\n        ? _viewport\r\n        : initActiveElm\r\n    );\r\n    undoInitWrapUndwrapFocus();\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n","import { setStyles, strHeight } from '~/support';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged = _content && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      setStyles(_content, {\r\n        [strHeight]: _heightIntrinsic && '100%',\r\n      });\r\n    }\r\n  };\r\n","import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  setStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative && `calc(100% + ${paddingHorizontal}px)`,\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      setStyles(_padding || _viewport, paddingStyle);\r\n      setStyles(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  getScrollSize,\r\n  getFractionalSize,\r\n  equalWH,\r\n  getClientSize,\r\n  equalXY,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  getWindowSize,\r\n  addRemoveAttrClass,\r\n  capitalizeFirstLetter,\r\n  setStyles,\r\n  strVisible,\r\n  strHidden,\r\n  each,\r\n  keys,\r\n  strScroll,\r\n  scrollElementTo,\r\n  getElementScroll,\r\n  sanatizeScrollCoordinates,\r\n  getStyles,\r\n  equal,\r\n  getZeroScrollCoordinates,\r\n  hasDimensions,\r\n  addEventListener,\r\n  stopPropagation,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueNoClipping,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataValueViewportOverflowXPrefix,\r\n  dataValueViewportOverflowYPrefix,\r\n  dataValueViewportNoContent,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { ScrollCoordinates, WH, XY } from '~/support';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\nimport type { ViewportOverflowState } from '../structureSetup.utils';\r\nimport {\r\n  createViewportOverflowState,\r\n  getShowNativeOverlaidScrollbars,\r\n  overflowIsVisible,\r\n} from '../structureSetup.utils';\r\n\r\ninterface FlowDirectionStyles {\r\n  display?: string;\r\n  direction?: string;\r\n  flexDirection?: string;\r\n  writingMode?: string;\r\n}\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  structureSetupState\r\n) => {\r\n  const env = getEnvironment();\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportIsTarget,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportAddRemoveClass,\r\n    _windowElm,\r\n  } = structureSetupElements;\r\n  const { _nativeScrollbarsHiding } = env;\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n  const max0 = bind(mathMax, 0);\r\n  const flowDirectionStyleArr = ['display', 'direction', 'flexDirection', 'writingMode'] as const;\r\n\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const partialXYOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: {},\r\n  };\r\n  const getOverflowAmount = (\r\n    viewportScrollSize: WH<number>,\r\n    viewportClientSize: WH<number>\r\n  ): WH<number> => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n  const measureScrollCoordinates = (): ScrollCoordinates => {\r\n    const originalScrollOffset = getElementScroll(_scrollOffsetElement);\r\n    const removeNoContent = _viewportAddRemoveClass(dataValueViewportNoContent, true);\r\n    const removeScrollBlock = addEventListener(_scrollOffsetElement, strScroll, stopPropagation, {\r\n      _capture: true,\r\n    });\r\n\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      x: 0,\r\n      y: 0,\r\n    });\r\n    removeNoContent();\r\n\r\n    const _start = getElementScroll(_scrollOffsetElement);\r\n    const scrollSize = getScrollSize(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      x: scrollSize.w,\r\n      y: scrollSize.h,\r\n    });\r\n\r\n    const tmp = getElementScroll(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      // if tmp is very close start there porbably wasn't any scroll happening so scroll again in different direction\r\n      x: tmp.x - _start.x < 1 && -scrollSize.w,\r\n      y: tmp.y - _start.y < 1 && -scrollSize.h,\r\n    });\r\n\r\n    const _end = getElementScroll(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, originalScrollOffset);\r\n    removeScrollBlock();\r\n\r\n    return {\r\n      _start,\r\n      _end,\r\n    };\r\n  };\r\n  const getFlowDirectionStyles = () =>\r\n    assignDeep({}, hasDimensions(_viewport) ? getStyles(_viewport, flowDirectionStyleArr) : {});\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(getFractionalSize, _viewport)\r\n  );\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(getScrollSize, _viewport));\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n  const [updateHasOverflowCache] = createCache<Partial<XY<boolean>>>(partialXYOptions);\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n  const [updateOverflowStyleCache] = createCache<Partial<XY<OverflowStyle>>>(partialXYOptions);\r\n  const [updateFlowDirectionStyles] = createCache<FlowDirectionStyles>({\r\n    _equal: (currVal, newValu) => equal(currVal, newValu, flowDirectionStyleArr),\r\n    _initialValue: {},\r\n  });\r\n  const [updateMeasuredScrollCoordinates, getCurrentMeasuredScrollCoordinates] =\r\n    createCache<ScrollCoordinates>({\r\n      _equal: (currVal, newVal) =>\r\n        equalXY(currVal._start, newVal._start) && equalXY(currVal._end, newVal._end),\r\n      _initialValue: getZeroScrollCoordinates(),\r\n    });\r\n\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const createViewportOverflowStyleClassName = (\r\n    overflowStyle: OverflowStyle,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const prefix = isHorizontal\r\n      ? dataValueViewportOverflowXPrefix\r\n      : dataValueViewportOverflowYPrefix;\r\n    return `${prefix}${capitalizeFirstLetter(overflowStyle)}`;\r\n  };\r\n\r\n  const setViewportOverflow = (viewportOverflowState: ViewportOverflowState) => {\r\n    const { _overflowStyle } = viewportOverflowState;\r\n\r\n    each(keys(_overflowStyle) as Array<keyof typeof _overflowStyle>, (axis) => {\r\n      const isHorizontal = axis === 'x';\r\n      const allOverflowStyleClassNames = (\r\n        [strVisible, strHidden, strScroll] as OverflowStyle[]\r\n      ).map((style) => createViewportOverflowStyleClassName(style, isHorizontal));\r\n      _viewportAddRemoveClass(allOverflowStyleClassNames.join(' '));\r\n      _viewportAddRemoveClass(\r\n        createViewportOverflowStyleClassName(_overflowStyle[axis], isHorizontal),\r\n        true\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const { _sizeChanged, _contentMutation, _directionChanged, _appear, _scrollbarSizeChanged } =\r\n      _observersUpdateHints || {};\r\n    const scrollbarsHidingPluginViewportArrangement =\r\n      scrollbarsHidingPlugin &&\r\n      scrollbarsHidingPlugin._viewportArrangement(\r\n        structureSetupElements,\r\n        structureSetupState,\r\n        _observersState,\r\n        env,\r\n        _checkOption\r\n      );\r\n\r\n    const { _arrangeViewport, _undoViewportArrange, _hideNativeScrollbars } =\r\n      scrollbarsHidingPluginViewportArrangement || {};\r\n\r\n    const [showNativeOverlaidScrollbars, showNativeOverlaidScrollbarsChanged] =\r\n      getShowNativeOverlaidScrollbars(_checkOption, env);\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n\r\n    const viewportChanged =\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(dataValueViewportScrollbarHidden, !showNativeOverlaidScrollbars);\r\n    }\r\n\r\n    if (viewportChanged) {\r\n      const [redoViewportArrange] = _undoViewportArrange ? _undoViewportArrange() : [];\r\n\r\n      const [sizeFraction] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = getClientSize(_viewport);\r\n      const arrangedViewportScrollSize = viewportScrollSize;\r\n      const arrangedViewportClientSize = viewportClientSize;\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      const windowInnerSize = getWindowSize(_windowElm());\r\n      const overflowAmountScrollSize = {\r\n        w: max0(mathMax(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\r\n        h: max0(mathMax(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.w\r\n            : arrangedViewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.h\r\n            : arrangedViewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const [hasOverflow, hasOverflowChanged] = updateHasOverflowCache({\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    });\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      viewportChanged;\r\n    const viewportOverflowState = createViewportOverflowState(hasOverflow, overflow);\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      viewportOverflowState._overflowStyle\r\n    );\r\n    const [, flowDirectionStylesChanged] = updateFlowDirectionStyles(\r\n      getFlowDirectionStyles(),\r\n      _force\r\n    );\r\n\r\n    const adjustMeasuredScrollCoordinates =\r\n      _directionChanged || _appear || flowDirectionStylesChanged || hasOverflowChanged || _force;\r\n    const [scrollCoordinates, scrollCoordinatesChanged] = adjustMeasuredScrollCoordinates\r\n      ? updateMeasuredScrollCoordinates(measureScrollCoordinates(), _force)\r\n      : getCurrentMeasuredScrollCoordinates();\r\n\r\n    if (adjustViewportStyle) {\r\n      setViewportOverflow(viewportOverflowState);\r\n\r\n      if (_hideNativeScrollbars && _arrangeViewport) {\r\n        setStyles(\r\n          _viewport,\r\n          _hideNativeScrollbars(\r\n            viewportOverflowState,\r\n            _observersState,\r\n            _arrangeViewport(viewportOverflowState, viewportScrollSize, sizeFraction)\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    addRemoveAttrClass(_host, dataAttributeHost, dataValueNoClipping, removeClipping);\r\n    addRemoveAttrClass(_padding, dataAttributePadding, dataValueNoClipping, removeClipping);\r\n\r\n    assignDeep(structureSetupState, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n      _scrollCoordinates: sanatizeScrollCoordinates(scrollCoordinates, overflowAmount),\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n      _scrollCoordinatesChanged: scrollCoordinatesChanged || overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n","import { getEnvironment } from '~/environment';\r\nimport {\r\n  assignDeep,\r\n  each,\r\n  getElementScroll,\r\n  getZeroScrollCoordinates,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport { dataValueViewportMeasuring } from '~/classnames';\r\nimport type { ScrollCoordinates } from '~/support';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _scrollCoordinates: ScrollCoordinates;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n  _scrollCoordinatesChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n    _scrollCoordinates: getZeroScrollCoordinates(),\r\n  };\r\n  const { _target, _scrollOffsetElement, _viewportIsTarget, _viewportAddRemoveClass } = elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange;\r\n      const revertMeasuring = _viewportAddRemoveClass(dataValueViewportMeasuring, true);\r\n      const scrollOffset = adjustScrollOffset && getElementScroll(_scrollOffsetElement);\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n      revertMeasuring();\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  bind,\r\n  getElementScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport { dataValueViewportMeasuring } from '~/classnames';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  const getCurrentOption = createOptionCheck(options, {});\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    getCurrentOption,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _originalScrollOffsetElement, _scrollOffsetElement, _viewportAddRemoveClass } =\r\n        structureSetupElements;\r\n      const revertMeasuring = _viewportAddRemoveClass(dataValueViewportMeasuring, true);\r\n      const initialScroll = getElementScroll(_originalScrollOffsetElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n\r\n      scrollElementTo(_scrollOffsetElement, initialScroll);\r\n      revertMeasuring();\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { Initialization, InitializationTarget, PartialInitialization } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** The scroll coordinates of the viewport. */\r\n  scrollCoordinates: {\r\n    /** The start (origin) scroll coordinates for each axis. */\r\n    start: XY<number>;\r\n    /** The end scroll coordinates for each axis. */\r\n    end: XY<number>;\r\n  };\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const {\r\n            _overflowEdgeChanged,\r\n            _overflowAmountChanged,\r\n            _overflowStyleChanged,\r\n            _scrollCoordinatesChanged,\r\n          } = _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                scrollCoordinatesChanged: !!_scrollCoordinatesChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n          _scrollCoordinates,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            scrollCoordinates: {\r\n              start: _scrollCoordinates._start,\r\n              end: _scrollCoordinates._end,\r\n            },\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update(true);\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],"names":["createCache","options","update","_initialValue","_equal","_alwaysUpdateValues","_value","_previous","cacheUpdateContextual","newValue","force","curr","newVal","changed","cacheUpdateIsolated","getCurrentCache","isBrowser","window","document","wnd","mathMax","Math","max","mathMin","min","mathRound","round","mathAbs","abs","mathSign","sign","cAF","cancelAnimationFrame","rAF","requestAnimationFrame","setT","setTimeout","clearT","clearTimeout","getApi","name","undefined","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","scrollT","ElementNodeType","Node","ELEMENT_NODE","_Object$prototype","Object","prototype","toString","hasOwnProperty","typeRgx","isUndefined","obj","isNull","type","call","replace","toLowerCase","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","lengthCorrectFormat","isPlainObject","key","cstr","ctor","ctorProto","hasOwnConstructor","hasIsPrototypeOf","isHTMLElement","instanceofObj","HTMLElement","nodeType","isElement","Element","animationCurrentTime","performance","now","animateNumber","from","to","duration","onFrame","easing","animationFrameId","timeStart","finalDuration","frame","complete","timeNow","timeElapsed","stopAnimation","percent","progress","animationCompleted","each","source","callback","i","keys","inArray","arr","item","indexOf","concat","a","b","push","array","items","arrayIsSingleItem","apply","createOrKeepArray","value","isEmptyArray","deduplicateArray","Set","runEachAndClear","args","keep","runFn","fn","strPaddingTop","strPaddingRight","strPaddingLeft","strPaddingBottom","strMarginLeft","strMarginRight","strMarginBottom","strOverflowX","strOverflowY","strWidth","strHeight","strVisible","strHidden","strScroll","capitalizeFirstLetter","str","finalStr","String","toUpperCase","slice","equal","props","propMutation","result","prop","compareA","compareB","equalWH","equalXY","equalTRBL","noop","bind","_len","arguments","_key","selfClearTimeout","timeout","id","setTFn","clearTFn","debounce","functionToDebounce","maxTimeoutId","prevArguments","latestArguments","clear","_ref","_timeout","_maxDelay","_mergeParams","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","clearTimeoutFn","mergeParamsResult","invokedArgs","boundInvoke","timeoutId","_flush","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","_","copy","copyIsArray","src","clone","removeUndefinedProperties","deep","isEmptyObject","capNumber","number","getDomTokensArray","tokens","split","filter","token","getAttr","elm","attrName","getAttribute","hasAttr","hasAttribute","setAttrs","attrNames","setAttribute","removeAttrs","removeAttribute","domTokenListAttr","initialArr","setElmAttr","domTokenListOperation","operationTokens","operation","initialArrSet","join","_remove","removeTokens","_add","addTokens","_has","hasTokens","tokenSet","reduce","boolean","includes","removeAttrClass","addAttrClass","addRemoveAttrClass","add","hasAttrClass","createDomTokenListClass","removeClass","className","addClass","find","selector","rootElm","querySelectorAll","findFirst","querySelector","is","matches","isBodyElement","contents","childNodes","parent","parentElement","closest","getFocusedElement","doc","activeElement","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","deepBoundaryIsValid","removeElements","nodes","e","parentElm","removeChild","before","preferredAnchor","insertedElms","anchor","fragment","createDocumentFragment","insertedElm","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","node","children","insertAfter","insertedNodes","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","trim","customCssPropRegex","getCSSVal","computedStyle","getPropertyValue","validFiniteNumber","notNaN","isFinite","parseToZeroOrNumber","parseFloat","ratioToCssPercent","ratio","toFixed","numberToCssPx","setStyles","styles","rawValue","elmStyle","style","test","setProperty","_unused","getStyles","pseudoElm","getSingleStyle","getStylesResult","getComputedStyle","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","getTrasformTranslateValue","isHorizontal","x","y","elementHasDimensions","offsetWidth","offsetHeight","getClientRects","zeroObj","w","h","getElmWidthHeightProperty","property","getWindowSize","customWnd","getOffsetSize","getClientSize","getScrollSize","getFractionalSize","cssWidth","cssHeight","getBoundingClientRect","hasDimensions","domRectHasDimensions","rect","domRectAppeared","currContentRect","prevContentRect","rectHasDimensions","rectHadDimensions","removeEventListener","eventNames","listener","capture","eventName","addEventListener","passive","_passive","_capture","once","_once","nativeOptions","map","finalListener","evt","stopPropagation","preventDefault","stopAndPrevent","scrollElementTo","position","scrollLeft","scrollTop","getElementScroll","getZeroScrollCoordinates","_start","_end","sanatizeScrollCoordinates","rawScrollCoordinates","overflowAmount","sanitizeAxis","start","end","amount","newStart","newEnd","startAbs","endAbs","_sanitizeAxis","startX","endX","_sanitizeAxis2","startY","endY","isDefaultDirectionScrollCoordinates","_ref2","getAxis","getScrollCoordinatesPercent","_ref3","currentScroll","current","manageListener","createEventListenerHub","initialEventListeners","events","Map","removeEvent","eventSet","get","currListener","forEach","addEvent","nameOrEventListeners","listenerOrPure","set","eventListenerKeys","offFns","eventListener","triggerEvent","event","opsStringify","JSON","stringify","val","getPropByPath","path","o","defaultOptions","paddingAbsolute","showNativeOverlaidScrollbars","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","autoHideSuspend","dragScroll","clickScroll","pointers","getOptionsDiff","currOptions","newOptions","diff","optionsKeys","optionKey","currOptionValue","newOptionValue","isDiff","createOptionCheck","changedOptions","dataAttributePrefix","classNameEnvironment","classNameEnvironmentScrollbarHidden","dataAttributeInitialize","dataValueNoClipping","dataAttributeHtmlBody","dataAttributeHost","dataValueHostIsHost","dataAttributeViewport","dataValueViewportOverflowXPrefix","dataValueViewportOverflowYPrefix","dataValueViewportArrange","dataValueViewportMeasuring","dataValueViewportScrollbarHidden","dataValueViewportScrollbarPressed","dataValueViewportNoContent","dataAttributePadding","dataAttributeContent","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerScroll","classNameSizeObserverListenerItem","classNameSizeObserverListenerItemFinal","classNameTrinsicObserver","classNameScrollbarThemeNone","classNameScrollbar","classNameScrollbarRtl","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","classNameScrollbarVisible","classNameScrollbarCornerless","classNameScrollbarInteraction","classNameScrollbarUnusable","classNameScrollbarAutoHide","classNameScrollbarAutoHideHidden","classNameScrollbarWheel","classNameScrollbarTrackInteractive","classNameScrollbarHandleInteractive","environmentInstance","createEnvironment","getNativeScrollbarSize","measureElm","measureElmChild","body","cSize","oSize","fSize","getNativeScrollbarsHiding","testElm","revertClass","envStyle","envDOM","envElm","envChildElm","_createEventListenerH","_createCache","updateNativeScrollbarSizeCache","getNativeScrollbarSizeCache","_getNativeScrollbarSi","nativeScrollbarsSize","nativeScrollbarsHiding","nativeScrollbarsOverlaid","staticDefaultInitialization","elements","host","padding","viewport","content","slot","cancel","staticDefaultOptions","getDefaultOptions","getDefaultInitialization","env","_nativeScrollbarsSize","_nativeScrollbarsOverlaid","_nativeScrollbarsHiding","_scrollTimeline","_addResizeListener","_getDefaultInitialization","_setDefaultInitialization","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_staticDefaultInitialization","_staticDefaultOptions","matchMedia","addZoomListener","onZoom","media","devicePixelRatio","_updateNativeScrollba","updatedNativeScrollbarSize","nativeScrollbarSizeChanged","getEnvironment","resolveInitialization","staticInitializationElement","fallbackStaticInitializationElement","defaultStaticInitializationElement","staticInitializationElementValue","staticInitialization","resolvedInitialization","dynamicInitializationElement","fallbackDynamicInitializationElement","defaultDynamicInitializationElement","dynamicInitializationElementValue","dynamicInitialization","cancelInitialization","isBody","cancelInitializationValue","_getEnvironment","_getDefaultInitializa","defaultNativeScrollbarsOverlaid","defaultbody","resolvedNativeScrollbarsOverlaid","resolvedDocumentScrollingElement","finalNativeScrollbarsOverlaid","finalDocumentScrollingElement","targetInstanceMap","WeakMap","addInstance","osInstance","removeInstance","delete","getInstance","createEventContentChange","eventContentChange","destroyed","destroy","updateElements","getElements","eventElmList","entries","isTargetChild","contains","removeListener","createDOMObserver","isContentObserver","isConnected","_attributes","_styleChangingAttributes","_eventContentChange","_nestedTargetSelector","_ignoreTargetChange","_ignoreContentChange","debouncedEventContentChange","_createEventContentCh","destroyEventContentChange","updateEventContentChangeElements","finalAttributes","finalStyleChangingAttributes","observedAttributes","observerCallback","fromRecords","mutations","ignoreTargetChange","ignoreContentChange","totalChangedNodes","targetChangedAttrs","targetStyleChanged","contentChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","removedNodes","isAttributesType","isChildListType","targetIsMutationTarget","isAttrChange","attributeValue","attributeChanged","styleChangingAttrChanged","contentAttrChanged","isNestedTarget","baseAssertion","contentFinalChanged","mutationObserver","observe","attributeOldValue","attributeFilter","subtree","childList","characterData","disconnect","takeRecords","pluginModules","staticPluginModuleInstances","addPlugins","addedPlugin","plugin","registerPluginModuleInstances","staticObj","instanceInfo","_plugin$name","osStatic","static","instance","instanceObj","instancePluginMap","getStaticPluginModuleInstance","pluginModuleName","_extends","module","assign","exports","__esModule","optionsTemplateTypes","string","object","function","null","validateRecursive","template","doWriteErrors","propPath","validatedOptions","optionsCopy","optionsValue","templateValue","templateIsComplex","propPrefix","_validateRecursive","validated","foreign","isValid","errorEnumStrings","errorPossibleTypes","optionsValueType","templateValueArr","currTemplateType","typeString","isEnumString","enumStringSplit","possibility","console","warn","validateOptions","optionsValidationPluginModuleName","_static","numberAllowedValues","oTypes","booleanAllowedValues","arrayNullValues","overflowAllowedValues","scrollbarsVisibilityAllowedValues","scrollbarsAutoHideAllowedValues","optionsTemplate","_validateOptions","sizeObserverPluginName","SizeObserverPlugin","listenerElement","onSizeChangedCallback","observeAppearChange","_setStyles","scrollAmount","scrollEventName","observerElementChildren","observerElementChildrenRoot","shrinkElement","lastChild","expandElement","expandElementChild","cacheSize","currSize","isDirty","rAFId","reset","onResized","appear","onScroll","scrollEvent","destroyFns","getShowNativeOverlaidScrollbars","checkOption","_checkOption","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","overflowIsVisible","overflowBehavior","createViewportOverflowState","hasOverflow","getAxisOverflowStyle","axisBehavior","axisHasOverflow","perpendicularBehavior","perpendicularOverflow","behaviorStyle","axisOverflowVisible","perpendicularOverflowVisible","nonPerpendicularOverflow","nonOverflow","_overflowStyle","_overflowScroll","scrollbarsHidingPluginName","ScrollbarsHidingPlugin","_viewportArrangement","structureSetupElements","structureSetupState","observersSetupState","checkOptions","_viewportIsTarget","_viewport","doViewportArrange","_getShowNativeOverlai","readViewportOverflowState","getStatePerAxis","styleKey","overflowStyle","overflowScroll","_getStatePerAxis","xOverflowStyle","xOverflowScroll","_getStatePerAxis2","yOverflowStyle","yOverflowScroll","_getViewportOverflowHideOffset","viewportOverflowState","arrangeHideOffset","getHideOffsetPerAxis","isOverlaid","nativeScrollbarSize","nonScrollbarStylingHideOffset","scrollbarsHideOffset","scrollbarsHideOffsetArrange","_getHideOffsetPerAxis","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","_getHideOffsetPerAxis2","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","_scrollbarsHideOffset","_scrollbarsHideOffsetArrange","_hideNativeScrollbars","viewportArrange","_directionIsRTL","_assignDeep","viewportStyleObj","_getViewportOverflowH","arrangeX","arrangeY","hideOffsetX","hideOffsetY","_viewportPaddingStyle","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","_arrangeViewport","viewportScrollSize","sizeFraction","_getViewportOverflowH2","viewportArrangeHorizontalPaddingKey","viewportArrangeHorizontalPaddingValue","viewportArrangeVerticalPaddingValue","paddingTop","fractionalContentWidth","fractionalContenHeight","arrangeSize","_undoViewportArrange","finalViewportOverflowState","viewportPaddingStyle","_getViewportOverflowH3","finalPaddingStyle","assignProps","prevStyle","addArrange","clickScrollPluginModuleName","ClickScrollPlugin","moveHandleRelative","getHandleOffset","startOffset","handleLength","relativeTrackPointerOffset","iteration","animateClickScroll","clickScrollProgress","animationProgress","handleStartBound","handleEndBound","mouseBetweenHandleBounds","firstIterationPauseTimeout","createSizeObserver","_appear","sizeObserverPlugin","updateResizeObserverContentRectCache","baseElements","sizeObserver","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","ResizeObserverEntry","skip","_updateResizeObserver","contentRect","currRContentRect","_sizeChanged","resizeObserverInstance","pop","_sizeObserverPlugin","pluginAppearCallback","pluginDestroyFns","createTrinsicObserver","onTrinsicChangedCallback","intersectionObserverInstance","isHeightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","heightIntrinsic","heightIntrinsicChanged","intersectionObserverCallback","root","onSizeChanged","newSize","createObserversSetup","getCurrentOption","onObserversUpdated","debounceTimeout","debounceMaxDelay","updateContentMutationObserver","destroyContentMutationObserver","prevDirectionIsRTL","hostSelector","viewportSelector","viewportAttrsFromTarget","baseStyleChangingAttrsTextarea","baseStyleChangingAttrs","_target","_host","_scrollOffsetElement","_content","_isTextarea","_viewportHasClass","_viewportAddRemoveClass","getDirectionIsRTL","state","_heightIntrinsic","scrollbarsHidingPlugin","isArranged","scrollOffset","revertMeasuring","redoViewportArrange","contentScroll","viewportScroll","fractional","updateContentSizeCache","contentMutationObserverAttr","onObserversUpdatedDebounced","prev","prevObj","currObj","setDirection","updateHints","newDirectionIsRTL","_directionChanged","updateViewportAttrsFromHost","attribute","hostAttr","onTrinsicChanged","heightIntrinsicCache","_heightIntrinsicChanged","exclusiveSizeChange","updateFn","onContentMutation","contentChangedThroughEvent","_updateContentSizeCac","_contentMutation","onHostMutation","_hostMutation","constructTrinsicObserver","updateTrinsicObserver","constructSizeObserver","_createDOMObserver","constructHostMutationObserver","updateHostMutationObserver","viewportIsTargetResizeObserver","destroySizeObserver","destroyTrinsicObserver","destroyHostMutationObserver","removeResizeListener","_scrollbarSizeChanged","_updateContentSizeCac2","_takeRecords","_force","_checkOption2","_checkOption3","attributesChanged","_checkOption4","elementEventsChanged","_checkOption5","debounceValue","debounceChanged","contentMutationObserverChanged","ignoreMutationFromOptions","_createDOMObserver2","ignore","construct","maxWait","hostUpdateResult","trinsicUpdateResult","contentUpdateResult","createScrollbarsSetupElements","scrollbarsSetupEvents","defaultInitScrollbars","defaultInitScrollbarsSlot","_targetIsElm","_isBody","scrollbarsInit","initScrollbarsSlot","elementAnimations","initScrollTimeline","axis","scrollTimeline","evaluatedScrollbarSlot","generalDynamicInitializationElement","getScrollbarHandleLengthRatio","scrollbarStructure","_track","_handle","handleSize","trackSize","_overflowAmount","_overflowEdge","viewportSize","getScrollbarHandleOffsetRatio","scrollPercent","lengthRatio","addDirectionRTLKeyframes","keyframes","cancelElementAnimations","currAnimations","element","doCancel","animation","setElementAnimation","timeline","composite","activeAnimations","activeAnimation","effect","KeyframeEffect","animate","scrollbarStructureAddRemoveClass","scrollbarStructures","action","_scrollbar","scrollbarStyle","_elmStyle","scrollbarStructureRefreshHandleLength","structure","scrollbarStructureRefreshHandleOffset","_scrollCoordinates","xyKey","axisScrollTimeline","axisIsDefaultDirectionScroll","getAxisTransformValue","transform","doRefreshScrollbarOffset","scrollbar","horizontalScrollbars","verticalScrollbars","scrollbarsAddRemoveClass","onlyHorizontal","singleAxis","runHorizontal","runVertical","refreshScrollbarsHandleLength","refreshScrollbarsHandleOffset","refreshScrollbarsScrollbarOffset","isDefaultDirectionScroll","cushion","_ref4","setScrollbarElementAnimation","styleScrollbarPosition","getTranslateValue","axisScrollPercent","axisOverflowAmount","axisIsDefaultCoordinates","px","generateScrollbarDOM","scrollbarClassName","track","handle","generateHorizontalScrollbarStructure","generateVerticalScrollbarStructure","appendElements","_refreshScrollbarsHandleLength","_refreshScrollbarsHandleOffset","_refreshScrollbarsScrollbarOffset","_scrollbarsAddRemoveClass","_horizontal","_scrollbarStructures","_clone","_style","_vertical","createScrollbarsSetupEvents","scrollbarHandlePointerInteraction","refreshScrollbarStructuresHandleOffset","_documentElm","_selfClearTimeout","wheelTimeout","clearWheelTimeout","_selfClearTimeout2","scrollSnapScrollTransitionTimeout","clearScrollSnapScrollTransitionTimeout","_selfClearTimeout3","requestHandleTransitionAnimationFrame","clearHandleTransitionTimeout","refreshHandleOffsetTransition","scrollOffsetElementScrollBy","coordinates","scrollBy","behavior","widthHeightKey","createInteractiveScrollEvents","releasePointerCaptureEvents","clientXYKey","leftTopKey","whKey","createRelativeHandleMove","mouseDownScroll","invertedScale","deltaMovement","_scrollElementTo","handleTrackDiff","scrollDeltaPercent","scrollDelta","pointerDownEvent","isDragScroll","pointerCaptureElement","scrollbarOptions","button","isPrimary","pointerType","continuePointerDown","instantClickScroll","shiftKey","getHandleRect","getTrackRect","handleRect","trackRect","axisScale","pointerDownOffset","handleCenter","releasePointerCapture","pointerUpEvent","pointerId","addScrollbarPressedClass","removeScrollbarPressedClass","withoutSnapScrollOffset","withSnapScrollOffset","snapScrollDiff","pointerMoveEvent","relativeMovement","setPointerCapture","wheelScrollBy","isAffectingTransition","propertyName","focusedElement","focus","preventScroll","wheelEvent","deltaX","deltaY","deltaMode","animateHandleOffset","createScrollbarsSetup","mouseInHost","autoHideIsMove","autoHideIsLeave","autoHideIsNever","prevTheme","instanceAutoHideSuspendScrollDestroyFn","instanceAutoHideDelay","isHoverablePointerType","requestScrollAnimationFrame","cancelScrollAnimationFrame","autoHideInstantInteractionTimeout","clearAutoHideInstantInteractionTimeout","autoHideSuspendTimeout","clearAutoHideSuspendTimeout","_selfClearTimeout4","auotHideTimeout","clearAutoHideTimeout","_createScrollbarsSetu","manageScrollbarsAutoHideInstantInteraction","_scrollEventElement","manageScrollbarsAutoHide","removeAutoHide","delayless","hide","manageAutoHideSuspension","onHostMouseEnter","_observersUpdateHints","_structureUpdateHints","_overflowEdgeChanged","_overflowAmountChanged","_overflowStyleChanged","_scrollCoordinatesChanged","_hasOverflow","themeChanged","visibilityChanged","autoHideChanged","_checkOption6","autoHideSuspendChanged","_checkOption7","_checkOption8","dragScrollChanged","_checkOption9","clickScrollChanged","_checkOption10","overflowChanged","trulyAppeared","updateScrollbars","updateVisibility","setScrollbarVisibility","isVisible","xVisible","yVisible","hasCorner","createStructureSetupElements","defaultInitElements","defaultHostInitialization","defaultPaddingInitialization","defaultViewportInitialization","defaultContentInitialization","targetIsElm","targetStructureInitialization","initElements","hostInitialization","paddingInitialization","viewportInitialization","contentInitialization","targetElement","isTextarea","ownerDocument","docElement","documentElement","getDocumentWindow","defaultView","focusElm","customActiveElm","generalStaticInitializationElement","createNewDiv","generateViewportElement","generateContentElement","possibleViewportElement","viewportIsTarget","viewportIsTargetBody","possibleContentElement","viewportIsContent","viewportElement","nonBodyHostElement","hostElement","paddingElement","contentElement","generatedElements","elementIsGenerated","originalNonBodyScrollOffsetElement","evaluatedTargetObj","_padding","_originalScrollOffsetElement","_windowElm","viewportAttributeClassName","isTextareaHostGenerated","targetContents","contentSlot","docWnd","initActiveElm","unwrap","prepareWrapUnwrapFocus","tabIndexStr","ogTabindex","undoInitWrapUndwrapFocus","destroyActiveElm","undoDestroyWrapUndwrapFocus","createTrinsicUpdateSegment","_observersState","createPaddingUpdateSegment","updatePaddingCache","currentPaddingCache","_currentPaddingCache","paddingChanged","paddingAbsoluteChanged","contentMutation","_updatePaddingCache","paddingStyleChanged","_paddingStyle","_viewportStyle","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","viewportStyle","_paddingAbsolute","_paddingStyleChanged","createOverflowUpdateSegment","max0","flowDirectionStyleArr","whCacheOptions","partialXYOptions","getOverflowAmount","viewportClientSize","tollerance","measureScrollCoordinates","originalScrollOffset","removeNoContent","removeScrollBlock","scrollSize","tmp","getFlowDirectionStyles","updateSizeFraction","getCurrentSizeFraction","_createCache2","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","_createCache3","updateOverflowAmountCache","getCurrentOverflowAmountCache","_createCache4","updateHasOverflowCache","_createCache5","updateOverflowEdge","getCurrentOverflowEdgeCache","_createCache6","updateOverflowStyleCache","_createCache7","currVal","newValu","updateFlowDirectionStyles","_createCache8","updateMeasuredScrollCoordinates","getCurrentMeasuredScrollCoordinates","createViewportOverflowStyleClassName","prefix","setViewportOverflow","allOverflowStyleClassNames","scrollbarsHidingPluginViewportArrangement","overflowXVisible","overflowYVisible","viewportChanged","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","overflowEdgeCache","_ref5","_sizeFractionCache","_viewportScrollSizeCa","arrangedViewportScrollSize","arrangedViewportClientSize","windowInnerSize","overflowAmountScrollSize","overflowAmountClientSize","_overflowEdgeCache","overflowEdge","overflowEdgeChanged","_overflowAmuntCache","overflowAmountChanged","_viewportScrollSizeCa2","viewportScrollSizeChanged","_sizeFractionCache2","sizeFractionChanged","_updateHasOverflowCac","hasOverflowChanged","removeClipping","adjustViewportStyle","_updateOverflowStyleC","overflowStyleChanged","_updateFlowDirectionS","flowDirectionStylesChanged","adjustMeasuredScrollCoordinates","_ref6","scrollCoordinates","scrollCoordinatesChanged","createStructureSetup","_createStructureSetup","appendStructureElements","canceled","updateSegments","updateInfo","adjustScrollOffset","updateSegment","createSetups","onUpdated","structureSetupCreate","structureSetupUpdate","structureSetupCanceled","_createObserversSetup","observersUpdateHints","observersSetupCreate","observersSetupUpdate","scrollbarsSetupCreate","scrollbarsSetupUpdate","scrollbarsSetupElements","updateHintsAreTruthy","hints","some","observerUpdateHints","rawChangedOptions","_changedOptions","rawForce","_cloneScrollbar","baseUpdateInfoObj","observersHints","structureHints","truthyObserversHints","truthyStructureHints","initialScroll","_observersSetupState","_structureSetupState","_structureSetupElements","_scrollbarsSetupElements","OverlayScrollbars","eventListeners","targetIsElement","instanceTarget","potentialInstance","instancePluginModuleInstances","newOptionsWithoutUndefined","pluginValidate","currentOptions","addPluginEvent","removePluginEvents","triggerPluginEvent","_createEventListenerH2","addInstanceEvent","removeInstanceEvents","triggerInstanceEvent","_createSetups","sizeChanged","directionChanged","hostMutation","setupsConstruct","setupsUpdate","setupsState","setupsElements","setupsCanceled","pure","base","on","off","_setupsState","directionRTL","_setupsElements$_stru","_setupsElements$_scro","translateScrollbarStructure","translateScrollbarsSetupElement","scrollbarsSetupElement","translatedStructure","scrollOffsetElement","scrollEventElement","scrollbarHorizontal","scrollbarVertical","plugins","isArr","pluginsToAdd","valid","hasElmsFn","_getEnvironment2","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","setDefaultInitialization","setDefaultOptions"],"mappings":"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","x_google_ignoreList":[30]}